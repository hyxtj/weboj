{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// src/axios.js\n\nimport axios from 'axios';\nimport router from './router';\nimport { Message } from 'element-ui';\n\n// 创建一个 Axios 实例\nconst instance = axios.create({\n  baseURL: 'http://localhost:5000',\n  timeout: 5000\n});\n\n// 请求拦截器：在每个请求发送之前添加 Authorization 头\ninstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  console.log('Axios Request Interceptor: Token:', token); // 添加日志\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n    console.log('Authorization Header Set:', config.headers['Authorization']); // 添加日志\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器：处理全局响应\ninstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n    if (status === 401) {\n      Message.error('未授权，请重新登录');\n      // 清除 Token\n      localStorage.removeItem('access_token');\n      // 跳转到登录页\n      router.push('/login');\n    } else if (status === 400) {\n      Message.error(data.msg || '请求错误');\n    } else if (status === 500) {\n      Message.error('服务器内部错误');\n    } else {\n      Message.error(data.msg || '发生错误');\n    }\n  } else if (error.request) {\n    Message.error('未收到服务器响应，请检查网络连接');\n  } else {\n    Message.error(error.message || '发生错误');\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","router","Message","instance","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","console","log","headers","error","Promise","reject","response","status","data","removeItem","push","msg","message"],"sources":["C:/Users/HUAWEI/jekedao_front/src/axios.js"],"sourcesContent":["// src/axios.js\r\n\r\nimport axios from 'axios';\r\nimport router from './router';\r\nimport { Message } from 'element-ui';\r\n\r\n// 创建一个 Axios 实例\r\nconst instance = axios.create({\r\n  baseURL: 'http://localhost:5000',\r\n  timeout: 5000,\r\n});\r\n\r\n// 请求拦截器：在每个请求发送之前添加 Authorization 头\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('access_token');\r\n    console.log('Axios Request Interceptor: Token:', token); // 添加日志\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n      console.log('Authorization Header Set:', config.headers['Authorization']); // 添加日志\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器：处理全局响应\r\ninstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response) {\r\n      const { status, data } = error.response;\r\n      if (status === 401) {\r\n        Message.error('未授权，请重新登录');\r\n        // 清除 Token\r\n        localStorage.removeItem('access_token');\r\n        // 跳转到登录页\r\n        router.push('/login');\r\n      } else if (status === 400) {\r\n        Message.error(data.msg || '请求错误');\r\n      } else if (status === 500) {\r\n        Message.error('服务器内部错误');\r\n      } else {\r\n        Message.error(data.msg || '发生错误');\r\n      }\r\n    } else if (error.request) {\r\n      Message.error('未收到服务器响应，请检查网络连接');\r\n    } else {\r\n      Message.error(error.message || '发生错误');\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance;"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,OAAO,QAAQ,YAAY;;AAEpC;AACA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC5BC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClDC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEJ,KAAK,CAAC,CAAC,CAAC;EACzD,IAAIA,KAAK,EAAE;IACTD,MAAM,CAACM,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;IACnDG,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEL,MAAM,CAACM,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;EAC7E;EACA,OAAON,MAAM;AACf,CAAC,EACAO,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,QAAQ,CAACI,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC/BW,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB,MAAM;MAAEC,MAAM;MAAEC;IAAK,CAAC,GAAGL,KAAK,CAACG,QAAQ;IACvC,IAAIC,MAAM,KAAK,GAAG,EAAE;MAClBnB,OAAO,CAACe,KAAK,CAAC,WAAW,CAAC;MAC1B;MACAL,YAAY,CAACW,UAAU,CAAC,cAAc,CAAC;MACvC;MACAtB,MAAM,CAACuB,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC,MAAM,IAAIH,MAAM,KAAK,GAAG,EAAE;MACzBnB,OAAO,CAACe,KAAK,CAACK,IAAI,CAACG,GAAG,IAAI,MAAM,CAAC;IACnC,CAAC,MAAM,IAAIJ,MAAM,KAAK,GAAG,EAAE;MACzBnB,OAAO,CAACe,KAAK,CAAC,SAAS,CAAC;IAC1B,CAAC,MAAM;MACLf,OAAO,CAACe,KAAK,CAACK,IAAI,CAACG,GAAG,IAAI,MAAM,CAAC;IACnC;EACF,CAAC,MAAM,IAAIR,KAAK,CAACT,OAAO,EAAE;IACxBN,OAAO,CAACe,KAAK,CAAC,kBAAkB,CAAC;EACnC,CAAC,MAAM;IACLf,OAAO,CAACe,KAAK,CAACA,KAAK,CAACS,OAAO,IAAI,MAAM,CAAC;EACxC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}