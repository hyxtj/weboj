{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'HomePage',\n  mounted() {\n    this.renderDynamicText();\n    this.initCanvas();\n  },\n  methods: {\n    renderDynamicText() {\n      const text = this.$refs.dynamicText.innerText;\n      this.$refs.dynamicText.innerText = '';\n      let index = 0;\n      const interval = setInterval(() => {\n        if (index < text.length) {\n          this.$refs.dynamicText.innerText += text[index];\n          index++;\n        } else {\n          clearInterval(interval);\n        }\n      }, 200); // 每个字符显示的间隔时间\n    },\n    initCanvas() {\n      const WIDTH = window.innerWidth;\n      const HEIGHT = window.innerHeight;\n      const POINT = 35;\n      const canvas = document.getElementById('Mycanvas');\n      canvas.width = WIDTH;\n      canvas.height = HEIGHT;\n      const context = canvas.getContext('2d');\n      context.strokeStyle = 'rgba(0,0,0,0.02)';\n      context.strokeWidth = 1;\n      context.fillStyle = 'rgba(0,0,0,0.05)';\n      let circleArr = [];\n      function Line(x, y, _x, _y, o) {\n        this.beginX = x;\n        this.beginY = y;\n        this.closeX = _x;\n        this.closeY = _y;\n        this.o = o;\n      }\n      function Circle(x, y, r, moveX, moveY) {\n        this.x = x;\n        this.y = y;\n        this.r = r;\n        this.moveX = moveX;\n        this.moveY = moveY;\n      }\n      function num(max, _min) {\n        const min = arguments[1] || 0;\n        return Math.floor(Math.random() * (max - min + 1) + min);\n      }\n      function drawCricle(cxt, x, y, r, moveX, moveY) {\n        const circle = new Circle(x, y, r, moveX, moveY);\n        cxt.beginPath();\n        cxt.arc(circle.x, circle.y, circle.r, 0, 2 * Math.PI);\n        cxt.closePath();\n        cxt.fill();\n        return circle;\n      }\n      function drawLine(cxt, x, y, _x, _y, o) {\n        const line = new Line(x, y, _x, _y, o);\n        cxt.beginPath();\n        cxt.strokeStyle = 'rgba(0,0,0,' + o + ')';\n        cxt.moveTo(line.beginX, line.beginY);\n        cxt.lineTo(line.closeX, line.closeY);\n        cxt.closePath();\n        cxt.stroke();\n      }\n      function init() {\n        circleArr = [];\n        for (let i = 0; i < POINT; i++) {\n          circleArr.push(drawCricle(context, num(WIDTH), num(HEIGHT), num(15, 2), num(10, -10) / 40, num(10, -10) / 40));\n        }\n        draw();\n      }\n      function draw() {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        for (let i = 0; i < POINT; i++) {\n          drawCricle(context, circleArr[i].x, circleArr[i].y, circleArr[i].r);\n        }\n        for (let i = 0; i < POINT; i++) {\n          for (let j = 0; j < POINT; j++) {\n            if (i + j < POINT) {\n              const A = Math.abs(circleArr[i + j].x - circleArr[i].x);\n              const B = Math.abs(circleArr[i + j].y - circleArr[i].y);\n              const lineLength = Math.sqrt(A * A + B * B);\n              const C = 1 / lineLength * 7 - 0.009;\n              const lineOpacity = C > 0.03 ? 0.03 : C;\n              if (lineOpacity > 0) {\n                drawLine(context, circleArr[i].x, circleArr[i].y, circleArr[i + j].x, circleArr[i + j].y, lineOpacity);\n              }\n            }\n          }\n        }\n      }\n      init();\n      setInterval(() => {\n        for (let i = 0; i < POINT; i++) {\n          const cir = circleArr[i];\n          cir.x += cir.moveX;\n          cir.y += cir.moveY;\n          if (cir.x > WIDTH) cir.x = 0;else if (cir.x < 0) cir.x = WIDTH;\n          if (cir.y > HEIGHT) cir.y = 0;else if (cir.y < 0) cir.y = HEIGHT;\n        }\n        draw();\n      }, 16);\n    }\n  }\n};","map":{"version":3,"names":["name","mounted","renderDynamicText","initCanvas","methods","text","$refs","dynamicText","innerText","index","interval","setInterval","length","clearInterval","WIDTH","window","innerWidth","HEIGHT","innerHeight","POINT","canvas","document","getElementById","width","height","context","getContext","strokeStyle","strokeWidth","fillStyle","circleArr","Line","x","y","_x","_y","o","beginX","beginY","closeX","closeY","Circle","r","moveX","moveY","num","max","_min","min","arguments","Math","floor","random","drawCricle","cxt","circle","beginPath","arc","PI","closePath","fill","drawLine","line","moveTo","lineTo","stroke","init","i","push","draw","clearRect","j","A","abs","B","lineLength","sqrt","C","lineOpacity","cir"],"sources":["src/components/HomePage.vue"],"sourcesContent":["<template>\r\n  <div class=\"home-container\">\r\n    <div class=\"schmenu\">\r\n      <ul>\r\n        <li><a href=\"javascript:history.back()\">返回上一页</a></li>\r\n        <li><a href=\"https://blog.csdn.net/chenzhi0122\" target=\"_blank\">去TA的CSDN主页</a></li>\r\n        <li><a href=\"\" target=\"_blank\">CZ工作室官方出品</a></li>\r\n      </ul>\r\n    </div>\r\n    <canvas id=\"Mycanvas\"></canvas>\r\n    <h1 class=\"dynamic-text\" ref=\"dynamicText\">欢迎来到OJ平台</h1>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'HomePage',\r\n  mounted() {\r\n    this.renderDynamicText();\r\n    this.initCanvas();\r\n  },\r\n  methods: {\r\n    renderDynamicText() {\r\n      const text = this.$refs.dynamicText.innerText;\r\n      this.$refs.dynamicText.innerText = '';\r\n      let index = 0;\r\n      const interval = setInterval(() => {\r\n        if (index < text.length) {\r\n          this.$refs.dynamicText.innerText += text[index];\r\n          index++;\r\n        } else {\r\n          clearInterval(interval);\r\n        }\r\n      }, 200); // 每个字符显示的间隔时间\r\n    },\r\n    initCanvas() {\r\n      const WIDTH = window.innerWidth;\r\n      const HEIGHT = window.innerHeight;\r\n      const POINT = 35;\r\n\r\n      const canvas = document.getElementById('Mycanvas');\r\n      canvas.width = WIDTH;\r\n      canvas.height = HEIGHT;\r\n      const context = canvas.getContext('2d');\r\n      context.strokeStyle = 'rgba(0,0,0,0.02)';\r\n      context.strokeWidth = 1;\r\n      context.fillStyle = 'rgba(0,0,0,0.05)';\r\n      let circleArr = [];\r\n\r\n      function Line(x, y, _x, _y, o) {\r\n        this.beginX = x;\r\n        this.beginY = y;\r\n        this.closeX = _x;\r\n        this.closeY = _y;\r\n        this.o = o;\r\n      }\r\n\r\n      function Circle(x, y, r, moveX, moveY) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.r = r;\r\n        this.moveX = moveX;\r\n        this.moveY = moveY;\r\n      }\r\n\r\n      function num(max, _min) {\r\n        const min = arguments[1] || 0;\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n      }\r\n\r\n      function drawCricle(cxt, x, y, r, moveX, moveY) {\r\n        const circle = new Circle(x, y, r, moveX, moveY);\r\n        cxt.beginPath();\r\n        cxt.arc(circle.x, circle.y, circle.r, 0, 2 * Math.PI);\r\n        cxt.closePath();\r\n        cxt.fill();\r\n        return circle;\r\n      }\r\n\r\n      function drawLine(cxt, x, y, _x, _y, o) {\r\n        const line = new Line(x, y, _x, _y, o);\r\n        cxt.beginPath();\r\n        cxt.strokeStyle = 'rgba(0,0,0,' + o + ')';\r\n        cxt.moveTo(line.beginX, line.beginY);\r\n        cxt.lineTo(line.closeX, line.closeY);\r\n        cxt.closePath();\r\n        cxt.stroke();\r\n      }\r\n\r\n      function init() {\r\n        circleArr = [];\r\n        for (let i = 0; i < POINT; i++) {\r\n          circleArr.push(drawCricle(context, num(WIDTH), num(HEIGHT), num(15, 2), num(10, -10) / 40, num(10, -10) / 40));\r\n        }\r\n        draw();\r\n      }\r\n\r\n      function draw() {\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        for (let i = 0; i < POINT; i++) {\r\n          drawCricle(context, circleArr[i].x, circleArr[i].y, circleArr[i].r);\r\n        }\r\n        for (let i = 0; i < POINT; i++) {\r\n          for (let j = 0; j < POINT; j++) {\r\n            if (i + j < POINT) {\r\n              const A = Math.abs(circleArr[i + j].x - circleArr[i].x);\r\n              const B = Math.abs(circleArr[i + j].y - circleArr[i].y);\r\n              const lineLength = Math.sqrt(A * A + B * B);\r\n              const C = 1 / lineLength * 7 - 0.009;\r\n              const lineOpacity = C > 0.03 ? 0.03 : C;\r\n              if (lineOpacity > 0) {\r\n                drawLine(context, circleArr[i].x, circleArr[i].y, circleArr[i + j].x, circleArr[i + j].y, lineOpacity);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      init();\r\n      setInterval(() => {\r\n        for (let i = 0; i < POINT; i++) {\r\n          const cir = circleArr[i];\r\n          cir.x += cir.moveX;\r\n          cir.y += cir.moveY;\r\n          if (cir.x > WIDTH) cir.x = 0;\r\n          else if (cir.x < 0) cir.x = WIDTH;\r\n          if (cir.y > HEIGHT) cir.y = 0;\r\n          else if (cir.y < 0) cir.y = HEIGHT;\r\n        }\r\n        draw();\r\n      }, 16);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.home-container {\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  background: url('C:/Users/HUAWEI/jekedao_front/src/background.gif') no-repeat center center;\r\n  background-size: cover; /* 确保背景图片覆盖整个容器 */\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n}\r\n\r\n.schmenu {\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 33px;\r\n  line-height: 33px;\r\n  background: #636871;\r\n  overflow: hidden;\r\n}\r\n\r\n.schmenu ul {\r\n  width: 1180px;\r\n  margin: 0 auto;\r\n  overflow: hidden;\r\n}\r\n\r\n.schmenu ul li {\r\n  float: left;\r\n  list-style: none;\r\n}\r\n\r\n.schmenu ul li a {\r\n  height: 33px;\r\n  line-height: 33px;\r\n  display: block;\r\n  color: #fff;\r\n  font-size: 13px;\r\n  padding: 0 10px;\r\n  text-decoration: none;\r\n}\r\n\r\n.schmenu ul li a:hover {\r\n  color: #fff;\r\n  background: #000;\r\n  text-decoration: none;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n#Mycanvas {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: -1;\r\n}\r\n\r\n.dynamic-text {\r\n  font-size: 2em;\r\n  font-weight: bold;\r\n  color: #333;\r\n  animation: fadeIn 1s ease-in-out;\r\n  z-index: 1;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}