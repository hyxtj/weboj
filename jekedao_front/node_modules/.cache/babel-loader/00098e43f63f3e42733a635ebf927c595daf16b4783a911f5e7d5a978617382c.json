{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../mode/sql/sql\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../../mode/sql/sql\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var tables;\n  var defaultTable;\n  var keywords;\n  var identifierQuote;\n  var CONS = {\n    QUERY_DIV: \";\",\n    ALIAS_KEYWORD: \"AS\"\n  };\n  var Pos = CodeMirror.Pos,\n    cmpPos = CodeMirror.cmpPos;\n  function isArray(val) {\n    return Object.prototype.toString.call(val) == \"[object Array]\";\n  }\n  function getModeConf(editor, field) {\n    return editor.getModeAt(editor.getCursor()).config[field] || CodeMirror.resolveMode(\"text/x-sql\")[field];\n  }\n  function getKeywords(editor) {\n    return getModeConf(editor, \"keywords\") || [];\n  }\n  function getIdentifierQuote(editor) {\n    return getModeConf(editor, \"identifierQuote\") || \"`\";\n  }\n  function getText(item) {\n    return typeof item == \"string\" ? item : item.text;\n  }\n  function wrapTable(name, value) {\n    if (isArray(value)) value = {\n      columns: value\n    };\n    if (!value.text) value.text = name;\n    return value;\n  }\n  function parseTables(input) {\n    var result = {};\n    if (isArray(input)) {\n      for (var i = input.length - 1; i >= 0; i--) {\n        var item = input[i];\n        result[getText(item).toUpperCase()] = wrapTable(getText(item), item);\n      }\n    } else if (input) {\n      for (var name in input) result[name.toUpperCase()] = wrapTable(name, input[name]);\n    }\n    return result;\n  }\n  function getTable(name) {\n    return tables[name.toUpperCase()];\n  }\n  function shallowClone(object) {\n    var result = {};\n    for (var key in object) if (object.hasOwnProperty(key)) result[key] = object[key];\n    return result;\n  }\n  function match(string, word) {\n    var len = string.length;\n    var sub = getText(word).substr(0, len);\n    return string.toUpperCase() === sub.toUpperCase();\n  }\n  function addMatches(result, search, wordlist, formatter) {\n    if (isArray(wordlist)) {\n      for (var i = 0; i < wordlist.length; i++) if (match(search, wordlist[i])) result.push(formatter(wordlist[i]));\n    } else {\n      for (var word in wordlist) if (wordlist.hasOwnProperty(word)) {\n        var val = wordlist[word];\n        if (!val || val === true) val = word;else val = val.displayText ? {\n          text: val.text,\n          displayText: val.displayText\n        } : val.text;\n        if (match(search, val)) result.push(formatter(val));\n      }\n    }\n  }\n  function cleanName(name) {\n    // Get rid name from identifierQuote and preceding dot(.)\n    if (name.charAt(0) == \".\") {\n      name = name.substr(1);\n    }\n    // replace duplicated identifierQuotes with single identifierQuotes\n    // and remove single identifierQuotes\n    var nameParts = name.split(identifierQuote + identifierQuote);\n    for (var i = 0; i < nameParts.length; i++) nameParts[i] = nameParts[i].replace(new RegExp(identifierQuote, \"g\"), \"\");\n    return nameParts.join(identifierQuote);\n  }\n  function insertIdentifierQuotes(name) {\n    var nameParts = getText(name).split(\".\");\n    for (var i = 0; i < nameParts.length; i++) nameParts[i] = identifierQuote +\n    // duplicate identifierQuotes\n    nameParts[i].replace(new RegExp(identifierQuote, \"g\"), identifierQuote + identifierQuote) + identifierQuote;\n    var escaped = nameParts.join(\".\");\n    if (typeof name == \"string\") return escaped;\n    name = shallowClone(name);\n    name.text = escaped;\n    return name;\n  }\n  function nameCompletion(cur, token, result, editor) {\n    // Try to complete table, column names and return start position of completion\n    var useIdentifierQuotes = false;\n    var nameParts = [];\n    var start = token.start;\n    var cont = true;\n    while (cont) {\n      cont = token.string.charAt(0) == \".\";\n      useIdentifierQuotes = useIdentifierQuotes || token.string.charAt(0) == identifierQuote;\n      start = token.start;\n      nameParts.unshift(cleanName(token.string));\n      token = editor.getTokenAt(Pos(cur.line, token.start));\n      if (token.string == \".\") {\n        cont = true;\n        token = editor.getTokenAt(Pos(cur.line, token.start));\n      }\n    }\n\n    // Try to complete table names\n    var string = nameParts.join(\".\");\n    addMatches(result, string, tables, function (w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns from defaultTable\n    addMatches(result, string, defaultTable, function (w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns\n    string = nameParts.pop();\n    var table = nameParts.join(\".\");\n    var alias = false;\n    var aliasTable = table;\n    // Check if table is available. If not, find table by Alias\n    if (!getTable(table)) {\n      var oldTable = table;\n      table = findTableByAlias(table, editor);\n      if (table !== oldTable) alias = true;\n    }\n    var columns = getTable(table);\n    if (columns && columns.columns) columns = columns.columns;\n    if (columns) {\n      addMatches(result, string, columns, function (w) {\n        var tableInsert = table;\n        if (alias == true) tableInsert = aliasTable;\n        if (typeof w == \"string\") {\n          w = tableInsert + \".\" + w;\n        } else {\n          w = shallowClone(w);\n          w.text = tableInsert + \".\" + w.text;\n        }\n        return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n      });\n    }\n    return start;\n  }\n  function eachWord(lineText, f) {\n    var words = lineText.split(/\\s+/);\n    for (var i = 0; i < words.length; i++) if (words[i]) f(words[i].replace(/[`,;]/g, ''));\n  }\n  function findTableByAlias(alias, editor) {\n    var doc = editor.doc;\n    var fullQuery = doc.getValue();\n    var aliasUpperCase = alias.toUpperCase();\n    var previousWord = \"\";\n    var table = \"\";\n    var separator = [];\n    var validRange = {\n      start: Pos(0, 0),\n      end: Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).length)\n    };\n\n    //add separator\n    var indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV);\n    while (indexOfSeparator != -1) {\n      separator.push(doc.posFromIndex(indexOfSeparator));\n      indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV, indexOfSeparator + 1);\n    }\n    separator.unshift(Pos(0, 0));\n    separator.push(Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).text.length));\n\n    //find valid range\n    var prevItem = null;\n    var current = editor.getCursor();\n    for (var i = 0; i < separator.length; i++) {\n      if ((prevItem == null || cmpPos(current, prevItem) > 0) && cmpPos(current, separator[i]) <= 0) {\n        validRange = {\n          start: prevItem,\n          end: separator[i]\n        };\n        break;\n      }\n      prevItem = separator[i];\n    }\n    if (validRange.start) {\n      var query = doc.getRange(validRange.start, validRange.end, false);\n      for (var i = 0; i < query.length; i++) {\n        var lineText = query[i];\n        eachWord(lineText, function (word) {\n          var wordUpperCase = word.toUpperCase();\n          if (wordUpperCase === aliasUpperCase && getTable(previousWord)) table = previousWord;\n          if (wordUpperCase !== CONS.ALIAS_KEYWORD) previousWord = word;\n        });\n        if (table) break;\n      }\n    }\n    return table;\n  }\n  CodeMirror.registerHelper(\"hint\", \"sql\", function (editor, options) {\n    tables = parseTables(options && options.tables);\n    var defaultTableName = options && options.defaultTable;\n    var disableKeywords = options && options.disableKeywords;\n    defaultTable = defaultTableName && getTable(defaultTableName);\n    keywords = getKeywords(editor);\n    identifierQuote = getIdentifierQuote(editor);\n    if (defaultTableName && !defaultTable) defaultTable = findTableByAlias(defaultTableName, editor);\n    defaultTable = defaultTable || [];\n    if (defaultTable.columns) defaultTable = defaultTable.columns;\n    var cur = editor.getCursor();\n    var result = [];\n    var token = editor.getTokenAt(cur),\n      start,\n      end,\n      search;\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n    if (token.string.match(/^[.`\"'\\w@][\\w$#]*$/g)) {\n      search = token.string;\n      start = token.start;\n      end = token.end;\n    } else {\n      start = end = cur.ch;\n      search = \"\";\n    }\n    if (search.charAt(0) == \".\" || search.charAt(0) == identifierQuote) {\n      start = nameCompletion(cur, token, result, editor);\n    } else {\n      var objectOrClass = function (w, className) {\n        if (typeof w === \"object\") {\n          w.className = className;\n        } else {\n          w = {\n            text: w,\n            className: className\n          };\n        }\n        return w;\n      };\n      addMatches(result, search, defaultTable, function (w) {\n        return objectOrClass(w, \"CodeMirror-hint-table CodeMirror-hint-default-table\");\n      });\n      addMatches(result, search, tables, function (w) {\n        return objectOrClass(w, \"CodeMirror-hint-table\");\n      });\n      if (!disableKeywords) addMatches(result, search, keywords, function (w) {\n        return objectOrClass(w.toUpperCase(), \"CodeMirror-hint-keyword\");\n      });\n    }\n    return {\n      list: result,\n      from: Pos(cur.line, start),\n      to: Pos(cur.line, end)\n    };\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","tables","defaultTable","keywords","identifierQuote","CONS","QUERY_DIV","ALIAS_KEYWORD","Pos","cmpPos","isArray","val","Object","prototype","toString","call","getModeConf","editor","field","getModeAt","getCursor","config","resolveMode","getKeywords","getIdentifierQuote","getText","item","text","wrapTable","name","value","columns","parseTables","input","result","i","length","toUpperCase","getTable","shallowClone","object","key","hasOwnProperty","match","string","word","len","sub","substr","addMatches","search","wordlist","formatter","push","displayText","cleanName","charAt","nameParts","split","replace","RegExp","join","insertIdentifierQuotes","escaped","nameCompletion","cur","token","useIdentifierQuotes","start","cont","unshift","getTokenAt","line","w","pop","table","alias","aliasTable","oldTable","findTableByAlias","tableInsert","eachWord","lineText","f","words","doc","fullQuery","getValue","aliasUpperCase","previousWord","separator","validRange","end","lastLine","getLineHandle","indexOfSeparator","indexOf","posFromIndex","prevItem","current","query","getRange","wordUpperCase","registerHelper","options","defaultTableName","disableKeywords","ch","slice","objectOrClass","className","list","from","to"],"sources":["D:/web2/jekedao_front/node_modules/codemirror/addon/hint/sql-hint.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../mode/sql/sql\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../mode/sql/sql\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var tables;\n  var defaultTable;\n  var keywords;\n  var identifierQuote;\n  var CONS = {\n    QUERY_DIV: \";\",\n    ALIAS_KEYWORD: \"AS\"\n  };\n  var Pos = CodeMirror.Pos, cmpPos = CodeMirror.cmpPos;\n\n  function isArray(val) { return Object.prototype.toString.call(val) == \"[object Array]\" }\n\n  function getModeConf(editor, field) {\n    return editor.getModeAt(editor.getCursor()).config[field] || CodeMirror.resolveMode(\"text/x-sql\")[field]\n  }\n\n  function getKeywords(editor) {\n    return getModeConf(editor, \"keywords\") || []\n  }\n\n  function getIdentifierQuote(editor) {\n    return getModeConf(editor, \"identifierQuote\") || \"`\";\n  }\n\n  function getText(item) {\n    return typeof item == \"string\" ? item : item.text;\n  }\n\n  function wrapTable(name, value) {\n    if (isArray(value)) value = {columns: value}\n    if (!value.text) value.text = name\n    return value\n  }\n\n  function parseTables(input) {\n    var result = {}\n    if (isArray(input)) {\n      for (var i = input.length - 1; i >= 0; i--) {\n        var item = input[i]\n        result[getText(item).toUpperCase()] = wrapTable(getText(item), item)\n      }\n    } else if (input) {\n      for (var name in input)\n        result[name.toUpperCase()] = wrapTable(name, input[name])\n    }\n    return result\n  }\n\n  function getTable(name) {\n    return tables[name.toUpperCase()]\n  }\n\n  function shallowClone(object) {\n    var result = {};\n    for (var key in object) if (object.hasOwnProperty(key))\n      result[key] = object[key];\n    return result;\n  }\n\n  function match(string, word) {\n    var len = string.length;\n    var sub = getText(word).substr(0, len);\n    return string.toUpperCase() === sub.toUpperCase();\n  }\n\n  function addMatches(result, search, wordlist, formatter) {\n    if (isArray(wordlist)) {\n      for (var i = 0; i < wordlist.length; i++)\n        if (match(search, wordlist[i])) result.push(formatter(wordlist[i]))\n    } else {\n      for (var word in wordlist) if (wordlist.hasOwnProperty(word)) {\n        var val = wordlist[word]\n        if (!val || val === true)\n          val = word\n        else\n          val = val.displayText ? {text: val.text, displayText: val.displayText} : val.text\n        if (match(search, val)) result.push(formatter(val))\n      }\n    }\n  }\n\n  function cleanName(name) {\n    // Get rid name from identifierQuote and preceding dot(.)\n    if (name.charAt(0) == \".\") {\n      name = name.substr(1);\n    }\n    // replace duplicated identifierQuotes with single identifierQuotes\n    // and remove single identifierQuotes\n    var nameParts = name.split(identifierQuote+identifierQuote);\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = nameParts[i].replace(new RegExp(identifierQuote,\"g\"), \"\");\n    return nameParts.join(identifierQuote);\n  }\n\n  function insertIdentifierQuotes(name) {\n    var nameParts = getText(name).split(\".\");\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = identifierQuote +\n      // duplicate identifierQuotes\n    nameParts[i].replace(new RegExp(identifierQuote,\"g\"), identifierQuote+identifierQuote) +\n      identifierQuote;\n    var escaped = nameParts.join(\".\");\n    if (typeof name == \"string\") return escaped;\n    name = shallowClone(name);\n    name.text = escaped;\n    return name;\n  }\n\n  function nameCompletion(cur, token, result, editor) {\n    // Try to complete table, column names and return start position of completion\n    var useIdentifierQuotes = false;\n    var nameParts = [];\n    var start = token.start;\n    var cont = true;\n    while (cont) {\n      cont = (token.string.charAt(0) == \".\");\n      useIdentifierQuotes = useIdentifierQuotes || (token.string.charAt(0) == identifierQuote);\n\n      start = token.start;\n      nameParts.unshift(cleanName(token.string));\n\n      token = editor.getTokenAt(Pos(cur.line, token.start));\n      if (token.string == \".\") {\n        cont = true;\n        token = editor.getTokenAt(Pos(cur.line, token.start));\n      }\n    }\n\n    // Try to complete table names\n    var string = nameParts.join(\".\");\n    addMatches(result, string, tables, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns from defaultTable\n    addMatches(result, string, defaultTable, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns\n    string = nameParts.pop();\n    var table = nameParts.join(\".\");\n\n    var alias = false;\n    var aliasTable = table;\n    // Check if table is available. If not, find table by Alias\n    if (!getTable(table)) {\n      var oldTable = table;\n      table = findTableByAlias(table, editor);\n      if (table !== oldTable) alias = true;\n    }\n\n    var columns = getTable(table);\n    if (columns && columns.columns)\n      columns = columns.columns;\n\n    if (columns) {\n      addMatches(result, string, columns, function(w) {\n        var tableInsert = table;\n        if (alias == true) tableInsert = aliasTable;\n        if (typeof w == \"string\") {\n          w = tableInsert + \".\" + w;\n        } else {\n          w = shallowClone(w);\n          w.text = tableInsert + \".\" + w.text;\n        }\n        return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n      });\n    }\n\n    return start;\n  }\n\n  function eachWord(lineText, f) {\n    var words = lineText.split(/\\s+/)\n    for (var i = 0; i < words.length; i++)\n      if (words[i]) f(words[i].replace(/[`,;]/g, ''))\n  }\n\n  function findTableByAlias(alias, editor) {\n    var doc = editor.doc;\n    var fullQuery = doc.getValue();\n    var aliasUpperCase = alias.toUpperCase();\n    var previousWord = \"\";\n    var table = \"\";\n    var separator = [];\n    var validRange = {\n      start: Pos(0, 0),\n      end: Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).length)\n    };\n\n    //add separator\n    var indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV);\n    while(indexOfSeparator != -1) {\n      separator.push(doc.posFromIndex(indexOfSeparator));\n      indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV, indexOfSeparator+1);\n    }\n    separator.unshift(Pos(0, 0));\n    separator.push(Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).text.length));\n\n    //find valid range\n    var prevItem = null;\n    var current = editor.getCursor()\n    for (var i = 0; i < separator.length; i++) {\n      if ((prevItem == null || cmpPos(current, prevItem) > 0) && cmpPos(current, separator[i]) <= 0) {\n        validRange = {start: prevItem, end: separator[i]};\n        break;\n      }\n      prevItem = separator[i];\n    }\n\n    if (validRange.start) {\n      var query = doc.getRange(validRange.start, validRange.end, false);\n\n      for (var i = 0; i < query.length; i++) {\n        var lineText = query[i];\n        eachWord(lineText, function(word) {\n          var wordUpperCase = word.toUpperCase();\n          if (wordUpperCase === aliasUpperCase && getTable(previousWord))\n            table = previousWord;\n          if (wordUpperCase !== CONS.ALIAS_KEYWORD)\n            previousWord = word;\n        });\n        if (table) break;\n      }\n    }\n    return table;\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"sql\", function(editor, options) {\n    tables = parseTables(options && options.tables)\n    var defaultTableName = options && options.defaultTable;\n    var disableKeywords = options && options.disableKeywords;\n    defaultTable = defaultTableName && getTable(defaultTableName);\n    keywords = getKeywords(editor);\n    identifierQuote = getIdentifierQuote(editor);\n\n    if (defaultTableName && !defaultTable)\n      defaultTable = findTableByAlias(defaultTableName, editor);\n\n    defaultTable = defaultTable || [];\n\n    if (defaultTable.columns)\n      defaultTable = defaultTable.columns;\n\n    var cur = editor.getCursor();\n    var result = [];\n    var token = editor.getTokenAt(cur), start, end, search;\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    if (token.string.match(/^[.`\"'\\w@][\\w$#]*$/g)) {\n      search = token.string;\n      start = token.start;\n      end = token.end;\n    } else {\n      start = end = cur.ch;\n      search = \"\";\n    }\n    if (search.charAt(0) == \".\" || search.charAt(0) == identifierQuote) {\n      start = nameCompletion(cur, token, result, editor);\n    } else {\n      var objectOrClass = function(w, className) {\n        if (typeof w === \"object\") {\n          w.className = className;\n        } else {\n          w = { text: w, className: className };\n        }\n        return w;\n      };\n      addMatches(result, search, defaultTable, function(w) {\n        return objectOrClass(w, \"CodeMirror-hint-table CodeMirror-hint-default-table\");\n      });\n      addMatches(\n        result,\n        search,\n        tables, function(w) {\n          return objectOrClass(w, \"CodeMirror-hint-table\");\n        }\n      );\n      if (!disableKeywords)\n        addMatches(result, search, keywords, function(w) {\n          return objectOrClass(w.toUpperCase(), \"CodeMirror-hint-keyword\");\n        });\n    }\n\n    return {list: result, from: Pos(cur.line, start), to: Pos(cur.line, end)};\n  });\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}