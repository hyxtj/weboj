{"ast":null,"code":"window.CodeMirror = require('codemirror');\nrequire('codemirror/lib/codemirror.css');\nrequire('codemirror/mode/meta');\nexport default {\n  name: 'codemirror',\n  data: function () {\n    return {\n      content: ''\n    };\n  },\n  props: {\n    code: String,\n    value: String,\n    events: Array,\n    unseenLines: Array,\n    marker: Function,\n    loadtheme: {\n      type: Boolean,\n      default: function () {\n        return true;\n      }\n    },\n    debugger: {\n      type: Boolean,\n      default: function () {\n        return true;\n      }\n    },\n    options: {\n      type: Object,\n      required: true\n    }\n  },\n  created: function () {\n    if (this.options.lineNumbers === undefined) {\n      this.options.lineNumbers = true;\n    }\n    if (this.options.lineWrapping === undefined) {\n      this.options.lineWrapping = false;\n    }\n    if (this.options.mode === undefined) {\n      this.options.mode = 'text/javascript';\n    }\n    var theme = this.options.theme;\n    var language = this.options.mode;\n    var _debugger = this.debugger;\n    var _loadtheme = this.loadtheme;\n    var isCustomMode = !!CodeMirror.modes[language];\n\n    // theme config\n    if (theme && theme == 'solarized light') {\n      theme = 'solarized';\n    }\n\n    // console.log(language, CodeMirror.modes.simplemode)\n\n    // language string config\n    if (typeof language == 'string') {\n      var lang = CodeMirror.findModeByMIME(language);\n      language = !lang ? lang : lang.mode;\n\n      // language object config\n    } else if (typeof language == 'object') {\n      if (language.name) {\n        var lang = CodeMirror.findModeByName(language.name);\n        if (lang) {\n          language = lang.mode;\n          // this.options.mode = language\n        } else {\n          language = null;\n        }\n      } else if (language.ext) {\n        var lang = CodeMirror.findModeByExtension(language.ext);\n        if (lang) {\n          language = lang.mode;\n          // this.options.mode = language\n        } else {\n          language = null;\n        }\n      } else if (language.mime) {\n        var lang = CodeMirror.findModeByMIME(language.mime);\n        if (lang) {\n          language = lang.mode;\n          // this.options.mode = language\n        } else {\n          language = null;\n        }\n      } else if (language.filename) {\n        var lang = CodeMirror.findModeByFileName(language.filename);\n        if (lang) {\n          language = lang.mode;\n          // this.options.mode = language\n        } else {\n          language = null;\n        }\n      }\n    }\n\n    // console.log('language', language, isCustomMode)\n\n    if ((!language || language == 'null') && _debugger && !isCustomMode) {\n      console.warn('CodeMirror language mode: ' + language + ' configuration error (CodeMirror语言模式配置错误，或者不支持此语言) See http://codemirror.net/mode/ for more details.');\n      // return false\n    }\n\n    // console.log(language, theme)\n\n    // require language\n    if (language && language !== 'null') {\n      require('codemirror/mode/' + language + '/' + language + '.js');\n    }\n\n    // require theme\n    if (theme && _loadtheme) {\n      require('codemirror/theme/' + theme + '.css');\n    }\n  },\n  mounted: function () {\n    var _this = this;\n    this.editor = CodeMirror.fromTextArea(this.$el, this.options);\n    this.editor.setValue(this.code || this.value || this.content);\n    this.editor.on('change', function (cm) {\n      _this.content = cm.getValue();\n      if (!!_this.$emit) {\n        _this.$emit('change', _this.content);\n        _this.$emit('input', _this.content);\n      }\n    });\n    var events = ['scroll', 'changes', 'beforeChange', 'cursorActivity', 'keyHandled', 'inputRead', 'electricInput', 'beforeSelectionChange', 'viewportChange', 'swapDoc', 'gutterClick', 'gutterContextMenu', 'focus', 'blur', 'refresh', 'optionChange', 'scrollCursorIntoView', 'update'];\n    if (this.events && this.events.length) {\n      events = events.concat(this.events);\n    }\n    for (var i = 0; i < events.length; i++) {\n      if (events.indexOf(events[i]) == i) {\n        (function (event) {\n          _this.editor.on(event, function (a, b, c) {\n            _this.$emit(event, a, b, c);\n          });\n        })(events[i]);\n      }\n    }\n    this.$emit('ready', this.editor);\n    this.unseenLineMarkers();\n\n    // prevents funky dynamic rendering\n    window.setTimeout(function () {\n      _this.editor.refresh();\n    }, 0);\n  },\n  beforeDestroy: function () {\n    // garbage cleanup\n    var element = this.editor.doc.cm.getWrapperElement();\n    if (element && element.remove) {\n      element.remove();\n    }\n  },\n  watch: {\n    options: {\n      deep: true,\n      handler(options, oldOptions) {\n        var key;\n        for (key in options) {\n          this.editor.setOption(key, options[key]);\n        }\n      }\n    },\n    code: function (newVal, oldVal) {\n      var editor_value = this.editor.getValue();\n      if (newVal !== editor_value) {\n        var scrollInfo = this.editor.getScrollInfo();\n        this.editor.setValue(newVal);\n        this.content = newVal;\n        this.editor.scrollTo(scrollInfo.left, scrollInfo.top);\n      }\n      this.unseenLineMarkers();\n    },\n    value: function (newVal, oldVal) {\n      var editor_value = this.editor.getValue();\n      if (newVal !== editor_value) {\n        var scrollInfo = this.editor.getScrollInfo();\n        this.editor.setValue(newVal);\n        this.content = newVal;\n        this.editor.scrollTo(scrollInfo.left, scrollInfo.top);\n      }\n      this.unseenLineMarkers();\n    }\n  },\n  methods: {\n    refresh: function () {\n      this.editor.refresh();\n    },\n    unseenLineMarkers: function () {\n      var _this = this;\n      if (_this.unseenLines !== undefined && _this.marker !== undefined) {\n        _this.unseenLines.forEach(line => {\n          var info = _this.editor.lineInfo(line);\n          _this.editor.setGutterMarker(line, \"breakpoints\", info.gutterMarkers ? null : _this.marker());\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["window","CodeMirror","require","name","data","content","props","code","String","value","events","Array","unseenLines","marker","Function","loadtheme","type","Boolean","default","debugger","options","Object","required","created","lineNumbers","undefined","lineWrapping","mode","theme","language","_debugger","_loadtheme","isCustomMode","modes","lang","findModeByMIME","findModeByName","ext","findModeByExtension","mime","filename","findModeByFileName","console","warn","mounted","_this","editor","fromTextArea","$el","setValue","on","cm","getValue","$emit","length","concat","i","indexOf","event","a","b","c","unseenLineMarkers","setTimeout","refresh","beforeDestroy","element","doc","getWrapperElement","remove","watch","deep","handler","oldOptions","key","setOption","newVal","oldVal","editor_value","scrollInfo","getScrollInfo","scrollTo","left","top","methods","forEach","line","info","lineInfo","setGutterMarker","gutterMarkers"],"sources":["node_modules/vue-codemirror/src/codemirror.vue"],"sourcesContent":["<template>\n  <textarea></textarea>\n</template>\n\n<script>\n  window.CodeMirror = require('codemirror')\n  require('codemirror/lib/codemirror.css')\n  require('codemirror/mode/meta')\n  export default {\n    name: 'codemirror',\n    data: function() {\n      return {\n        content: ''\n      }\n    },\n    props: {\n      code: String,\n      value: String,\n      events: Array,\n      unseenLines: Array,\n      marker: Function,\n      loadtheme: {\n        type: Boolean,\n        default: function() {\n          return true\n        }\n      },\n      debugger: {\n        type: Boolean,\n        default: function() {\n          return true\n        }\n      },\n      options: {\n        type: Object,\n        required: true\n      },\n    },\n    created: function() {\n\n      if (this.options.lineNumbers === undefined) {\n        this.options.lineNumbers = true\n      }\n      if (this.options.lineWrapping === undefined) {\n        this.options.lineWrapping = false\n      }\n      if (this.options.mode === undefined) {\n        this.options.mode = 'text/javascript'\n      }\n\n      var theme = this.options.theme\n      var language = this.options.mode\n      var _debugger = this.debugger\n      var _loadtheme = this.loadtheme\n      var isCustomMode = !!CodeMirror.modes[language]\n\n      // theme config\n      if (theme && theme == 'solarized light') {\n        theme = 'solarized'\n      }\n\n      // console.log(language, CodeMirror.modes.simplemode)\n\n      // language string config\n      if (typeof language == 'string') {\n        var lang = CodeMirror.findModeByMIME(language)\n        language = !lang ? lang : lang.mode\n\n      // language object config\n      } else if (typeof language == 'object') {\n\n        if (language.name) {\n          var lang = CodeMirror.findModeByName(language.name)\n          if (lang) {\n            language = lang.mode\n            // this.options.mode = language\n          } else {\n            language = null\n          }\n        } else if (language.ext) {\n          var lang = CodeMirror.findModeByExtension(language.ext)\n          if (lang) {\n            language = lang.mode\n            // this.options.mode = language\n          } else {\n            language = null\n          }\n        } else if (language.mime) {\n          var lang = CodeMirror.findModeByMIME(language.mime)\n          if (lang) {\n            language = lang.mode\n            // this.options.mode = language\n          } else {\n            language = null\n          }\n        } else if (language.filename) {\n          var lang = CodeMirror.findModeByFileName(language.filename)\n          if (lang) {\n            language = lang.mode\n            // this.options.mode = language\n          } else {\n            language = null\n          }\n        }\n      }\n      \n      // console.log('language', language, isCustomMode)\n\n      if ((!language || language == 'null') && _debugger && !isCustomMode) {\n        console.warn('CodeMirror language mode: ' + language + ' configuration error (CodeMirror语言模式配置错误，或者不支持此语言) See http://codemirror.net/mode/ for more details.')\n        // return false\n      }\n\n      // console.log(language, theme)\n\n      // require language\n      if (language && language !== 'null') {\n        require('codemirror/mode/' + language + '/' + language + '.js')\n      }\n\n      // require theme\n      if (theme && _loadtheme) {\n        require('codemirror/theme/' + theme + '.css')\n      }\n    },\n    mounted: function() {\n      var _this = this\n      this.editor = CodeMirror.fromTextArea(this.$el, this.options)\n      this.editor.setValue(this.code || this.value || this.content)\n      this.editor.on('change', function(cm) {\n        _this.content = cm.getValue()\n        if (!!_this.$emit) {\n          _this.$emit('change', _this.content)\n          _this.$emit('input', _this.content)\n        }\n      })\n      var events = [\n        'scroll',\n        'changes',\n        'beforeChange',\n        'cursorActivity',\n        'keyHandled',\n        'inputRead',\n        'electricInput',\n        'beforeSelectionChange',\n        'viewportChange',\n        'swapDoc',\n        'gutterClick',\n        'gutterContextMenu',\n        'focus',\n        'blur',\n        'refresh',\n        'optionChange',\n        'scrollCursorIntoView',\n        'update'\n      ];\n      if (this.events && this.events.length) {\n        events = events.concat(this.events)\n      }\n      for (var i = 0; i < events.length; i++) {\n        if (events.indexOf(events[i]) == i) {\n          (function(event) {\n            _this.editor.on(event, function(a, b, c) {\n              _this.$emit(event, a, b, c)\n            })\n          })(events[i])\n        }\n      }\n      this.$emit('ready', this.editor)\n      this.unseenLineMarkers()\n\n      // prevents funky dynamic rendering\n      window.setTimeout(function() {\n        _this.editor.refresh()\n      }, 0)\n    },\n    beforeDestroy: function() {\n      \n      // garbage cleanup\n      var element = this.editor.doc.cm.getWrapperElement()\n      if (element && element.remove) {\n        element.remove()\n      }\n    },\n    watch: {\n      options: {\n        deep: true,\n        handler(options, oldOptions) {\n          var key\n          for (key in options) {\n            this.editor.setOption(key, options[key])\n          }\n        }\n      },\n      code: function(newVal, oldVal) {\n        var editor_value = this.editor.getValue()\n        if (newVal !== editor_value) {\n          var scrollInfo = this.editor.getScrollInfo()\n          this.editor.setValue(newVal)\n          this.content = newVal\n          this.editor.scrollTo(scrollInfo.left, scrollInfo.top)\n        }\n        this.unseenLineMarkers()\n      },\n      value: function(newVal, oldVal) {\n        var editor_value = this.editor.getValue()\n        if (newVal !== editor_value) {\n          var scrollInfo = this.editor.getScrollInfo()\n          this.editor.setValue(newVal)\n          this.content = newVal\n          this.editor.scrollTo(scrollInfo.left, scrollInfo.top)\n        }\n        this.unseenLineMarkers()\n      }\n    },\n    methods: {\n      refresh: function() {\n        this.editor.refresh()\n      },\n      unseenLineMarkers: function () {\n        var _this = this\n        if (_this.unseenLines !== undefined && _this.marker !== undefined) {\n          _this.unseenLines.forEach(line => {\n            var info = _this.editor.lineInfo(line)\n            _this.editor.setGutterMarker(line, \"breakpoints\", info.gutterMarkers ? null : _this.marker())\n          })\n        }\n      }\n    }\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}