{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from '@/axios'; // 使用配置好的 Axios 实例\n\nexport default {\n  name: 'UploadSolution',\n  data() {\n    return {\n      form: {\n        problemId: null,\n        solution: ''\n      },\n      loading: false,\n      rules: {\n        problemId: [{\n          required: true,\n          message: '请输入题目ID',\n          trigger: 'blur'\n        }, {\n          type: 'number',\n          message: '题目ID必须是数字',\n          trigger: 'blur'\n        }, {\n          validator: (rule, value, callback) => {\n            if (value === null || value === undefined) {\n              callback(new Error('题目ID为必填项'));\n            } else if (typeof value !== 'number') {\n              callback(new Error('题目ID必须是数字'));\n            } else if (value <= 0) {\n              callback(new Error('题目ID必须大于0'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        solution: [{\n          required: true,\n          message: '请输入题解内容',\n          trigger: 'blur'\n        }, {\n          min: 10,\n          message: '题解内容长度至少10个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    submitForm() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          this.loading = true;\n          axios.post('/uploadsolutions', this.form).then(response => {\n            this.loading = false;\n            if (response.data.code === 201) {\n              this.$message.success('题解上传成功！');\n              this.resetForm();\n              this.$router.push('/problemset'); // 确保跳转路径正确\n            } else {\n              this.$message.error(response.data.msg || '题解上传失败');\n            }\n          }).catch(error => {\n            this.loading = false;\n            console.error('题解上传失败:', error);\n            if (error.response) {\n              console.error('响应数据:', error.response.data);\n              console.error('响应状态:', error.response.status);\n              console.error('响应头:', error.response.headers);\n              this.$message.error(error.response.data.msg || '题解上传失败');\n            } else if (error.request) {\n              console.error('请求数据:', error.request);\n              this.$message.error('未收到服务器响应，请检查网络连接');\n            } else {\n              console.error('错误信息:', error.message);\n              this.$message.error('发生错误，请重试');\n            }\n          });\n        } else {\n          this.$message.error('请完成表单字段的填写');\n          return false;\n        }\n      });\n    },\n    resetForm() {\n      this.$refs.form.resetFields();\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","form","problemId","solution","loading","rules","required","message","trigger","type","validator","rule","value","callback","undefined","Error","min","methods","submitForm","$refs","validate","valid","post","then","response","code","$message","success","resetForm","$router","push","error","msg","catch","console","status","headers","request","resetFields"],"sources":["src/components/UploadSolution.vue"],"sourcesContent":["<!-- src/components/UploadSolution.vue -->\r\n<template>\r\n    <div class=\"upload-solution\">\r\n      <h1>上传题解</h1>\r\n      <el-form\r\n        ref=\"form\"\r\n        :model=\"form\"\r\n        :rules=\"rules\"\r\n        label-width=\"80px\"\r\n        @submit.native.prevent=\"submitForm\"\r\n      >\r\n        <el-form-item label=\"题目ID\" prop=\"problemId\">\r\n          <el-input\r\n            v-model.number=\"form.problemId\"\r\n            placeholder=\"请输入题目ID\"\r\n            type=\"number\"\r\n          ></el-input>\r\n        </el-form-item>\r\n  \r\n        <el-form-item label=\"题解内容\" prop=\"solution\">\r\n          <el-input\r\n            type=\"textarea\"\r\n            v-model=\"form.solution\"\r\n            placeholder=\"请输入题解内容\"\r\n            :rows=\"10\"\r\n          ></el-input>\r\n        </el-form-item>\r\n  \r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"loading\">提交</el-button>\r\n          <el-button @click=\"resetForm\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from '@/axios'; // 使用配置好的 Axios 实例\r\n  \r\n  export default {\r\n    name: 'UploadSolution',\r\n    data() {\r\n      return {\r\n        form: {\r\n          problemId: null,\r\n          solution: '',\r\n        },\r\n        loading: false,\r\n        rules: {\r\n          problemId: [\r\n            { required: true, message: '请输入题目ID', trigger: 'blur' },\r\n            { type: 'number', message: '题目ID必须是数字', trigger: 'blur' },\r\n            {\r\n              validator: (rule, value, callback) => {\r\n                if (value === null || value === undefined) {\r\n                  callback(new Error('题目ID为必填项'));\r\n                } else if (typeof value !== 'number') {\r\n                  callback(new Error('题目ID必须是数字'));\r\n                } else if (value <= 0) {\r\n                  callback(new Error('题目ID必须大于0'));\r\n                } else {\r\n                  callback();\r\n                }\r\n              },\r\n              trigger: 'blur',\r\n            },\r\n          ],\r\n          solution: [\r\n            { required: true, message: '请输入题解内容', trigger: 'blur' },\r\n            { min: 10, message: '题解内容长度至少10个字符', trigger: 'blur' },\r\n          ],\r\n        },\r\n      };\r\n    },\r\n    methods: {\r\n      submitForm() {\r\n        this.$refs.form.validate((valid) => {\r\n          if (valid) {\r\n            this.loading = true;\r\n            axios.post('/uploadsolutions', this.form)\r\n              .then((response) => {\r\n                this.loading = false;\r\n                if (response.data.code === 201) {\r\n                  this.$message.success('题解上传成功！');\r\n                  this.resetForm();\r\n                  this.$router.push('/problemset'); // 确保跳转路径正确\r\n                } else {\r\n                  this.$message.error(response.data.msg || '题解上传失败');\r\n                }\r\n              })\r\n              .catch((error) => {\r\n                this.loading = false;\r\n                console.error('题解上传失败:', error);\r\n                if (error.response) {\r\n                  console.error('响应数据:', error.response.data);\r\n                  console.error('响应状态:', error.response.status);\r\n                  console.error('响应头:', error.response.headers);\r\n                  this.$message.error(error.response.data.msg || '题解上传失败');\r\n                } else if (error.request) {\r\n                  console.error('请求数据:', error.request);\r\n                  this.$message.error('未收到服务器响应，请检查网络连接');\r\n                } else {\r\n                  console.error('错误信息:', error.message);\r\n                  this.$message.error('发生错误，请重试');\r\n                }\r\n              });\r\n          } else {\r\n            this.$message.error('请完成表单字段的填写');\r\n            return false;\r\n          }\r\n        });\r\n      },\r\n      resetForm() {\r\n        this.$refs.form.resetFields();\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .upload-solution {\r\n    max-width: 600px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n  }\r\n  \r\n  h1 {\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n  }\r\n  </style>"],"mappings":";AAqCA,OAAAA,KAAA;;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,IAAA;QACAC,SAAA;QACAC,QAAA;MACA;MACAC,OAAA;MACAC,KAAA;QACAH,SAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,IAAA;UAAAF,OAAA;UAAAC,OAAA;QAAA,GACA;UACAE,SAAA,EAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;YACA,IAAAD,KAAA,aAAAA,KAAA,KAAAE,SAAA;cACAD,QAAA,KAAAE,KAAA;YACA,kBAAAH,KAAA;cACAC,QAAA,KAAAE,KAAA;YACA,WAAAH,KAAA;cACAC,QAAA,KAAAE,KAAA;YACA;cACAF,QAAA;YACA;UACA;UACAL,OAAA;QACA,EACA;QACAL,QAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAQ,GAAA;UAAAT,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAS,OAAA;IACAC,WAAA;MACA,KAAAC,KAAA,CAAAlB,IAAA,CAAAmB,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAjB,OAAA;UACAN,KAAA,CAAAwB,IAAA,0BAAArB,IAAA,EACAsB,IAAA,CAAAC,QAAA;YACA,KAAApB,OAAA;YACA,IAAAoB,QAAA,CAAAxB,IAAA,CAAAyB,IAAA;cACA,KAAAC,QAAA,CAAAC,OAAA;cACA,KAAAC,SAAA;cACA,KAAAC,OAAA,CAAAC,IAAA;YACA;cACA,KAAAJ,QAAA,CAAAK,KAAA,CAAAP,QAAA,CAAAxB,IAAA,CAAAgC,GAAA;YACA;UACA,GACAC,KAAA,CAAAF,KAAA;YACA,KAAA3B,OAAA;YACA8B,OAAA,CAAAH,KAAA,YAAAA,KAAA;YACA,IAAAA,KAAA,CAAAP,QAAA;cACAU,OAAA,CAAAH,KAAA,UAAAA,KAAA,CAAAP,QAAA,CAAAxB,IAAA;cACAkC,OAAA,CAAAH,KAAA,UAAAA,KAAA,CAAAP,QAAA,CAAAW,MAAA;cACAD,OAAA,CAAAH,KAAA,SAAAA,KAAA,CAAAP,QAAA,CAAAY,OAAA;cACA,KAAAV,QAAA,CAAAK,KAAA,CAAAA,KAAA,CAAAP,QAAA,CAAAxB,IAAA,CAAAgC,GAAA;YACA,WAAAD,KAAA,CAAAM,OAAA;cACAH,OAAA,CAAAH,KAAA,UAAAA,KAAA,CAAAM,OAAA;cACA,KAAAX,QAAA,CAAAK,KAAA;YACA;cACAG,OAAA,CAAAH,KAAA,UAAAA,KAAA,CAAAxB,OAAA;cACA,KAAAmB,QAAA,CAAAK,KAAA;YACA;UACA;QACA;UACA,KAAAL,QAAA,CAAAK,KAAA;UACA;QACA;MACA;IACA;IACAH,UAAA;MACA,KAAAT,KAAA,CAAAlB,IAAA,CAAAqC,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}