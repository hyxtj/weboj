{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function lineIndent(cm, lineNo) {\n    var text = cm.getLine(lineNo);\n    var spaceTo = text.search(/\\S/);\n    if (spaceTo == -1 || /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, spaceTo + 1)))) return -1;\n    return CodeMirror.countColumn(text, null, cm.getOption(\"tabSize\"));\n  }\n  CodeMirror.registerHelper(\"fold\", \"indent\", function (cm, start) {\n    var myIndent = lineIndent(cm, start.line);\n    if (myIndent < 0) return;\n    var lastLineInFold = null;\n\n    // Go through lines until we find a line that definitely doesn't belong in\n    // the block we're folding, or to the end.\n    for (var i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n      var indent = lineIndent(cm, i);\n      if (indent == -1) {} else if (indent > myIndent) {\n        // Lines with a greater indent are considered part of the block.\n        lastLineInFold = i;\n      } else {\n        // If this line has non-space, non-comment content, and is\n        // indented less or equal to the start line, it is the start of\n        // another block.\n        break;\n      }\n    }\n    if (lastLineInFold) return {\n      from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n      to: CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n    };\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","lineIndent","cm","lineNo","text","getLine","spaceTo","search","test","getTokenTypeAt","Pos","countColumn","getOption","registerHelper","start","myIndent","line","lastLineInFold","i","end","lastLine","indent","from","length","to"],"sources":["D:/web2/jekedao_front/node_modules/codemirror/addon/fold/indent-fold.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction lineIndent(cm, lineNo) {\n  var text = cm.getLine(lineNo)\n  var spaceTo = text.search(/\\S/)\n  if (spaceTo == -1 || /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, spaceTo + 1))))\n    return -1\n  return CodeMirror.countColumn(text, null, cm.getOption(\"tabSize\"))\n}\n\nCodeMirror.registerHelper(\"fold\", \"indent\", function(cm, start) {\n  var myIndent = lineIndent(cm, start.line)\n  if (myIndent < 0) return\n  var lastLineInFold = null\n\n  // Go through lines until we find a line that definitely doesn't belong in\n  // the block we're folding, or to the end.\n  for (var i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n    var indent = lineIndent(cm, i)\n    if (indent == -1) {\n    } else if (indent > myIndent) {\n      // Lines with a greater indent are considered part of the block.\n      lastLineInFold = i;\n    } else {\n      // If this line has non-space, non-comment content, and is\n      // indented less or equal to the start line, it is the start of\n      // another block.\n      break;\n    }\n  }\n  if (lastLineInFold) return {\n    from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n    to: CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n  };\n});\n\n});\n"],"mappings":"AAAA;AACA;;AAEA,CAAC,UAASA,GAAG,EAAE;EACb,IAAI,OAAOC,OAAO,IAAI,QAAQ,IAAI,OAAOC,MAAM,IAAI,QAAQ;IAAE;IAC3DF,GAAG,CAACG,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,KAClC,IAAI,OAAOC,MAAM,IAAI,UAAU,IAAIA,MAAM,CAACC,GAAG;IAAE;IAClDD,MAAM,CAAC,CAAC,sBAAsB,CAAC,EAAEJ,GAAG,CAAC,CAAC;IACnC;IACHA,GAAG,CAACM,UAAU,CAAC;AACnB,CAAC,EAAE,UAASA,UAAU,EAAE;EACxB,YAAY;;EAEZ,SAASC,UAAUA,CAACC,EAAE,EAAEC,MAAM,EAAE;IAC9B,IAAIC,IAAI,GAAGF,EAAE,CAACG,OAAO,CAACF,MAAM,CAAC;IAC7B,IAAIG,OAAO,GAAGF,IAAI,CAACG,MAAM,CAAC,IAAI,CAAC;IAC/B,IAAID,OAAO,IAAI,CAAC,CAAC,IAAI,aAAa,CAACE,IAAI,CAACN,EAAE,CAACO,cAAc,CAACT,UAAU,CAACU,GAAG,CAACP,MAAM,EAAEG,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,EAC7F,OAAO,CAAC,CAAC;IACX,OAAON,UAAU,CAACW,WAAW,CAACP,IAAI,EAAE,IAAI,EAAEF,EAAE,CAACU,SAAS,CAAC,SAAS,CAAC,CAAC;EACpE;EAEAZ,UAAU,CAACa,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,UAASX,EAAE,EAAEY,KAAK,EAAE;IAC9D,IAAIC,QAAQ,GAAGd,UAAU,CAACC,EAAE,EAAEY,KAAK,CAACE,IAAI,CAAC;IACzC,IAAID,QAAQ,GAAG,CAAC,EAAE;IAClB,IAAIE,cAAc,GAAG,IAAI;;IAEzB;IACA;IACA,KAAK,IAAIC,CAAC,GAAGJ,KAAK,CAACE,IAAI,GAAG,CAAC,EAAEG,GAAG,GAAGjB,EAAE,CAACkB,QAAQ,CAAC,CAAC,EAAEF,CAAC,IAAIC,GAAG,EAAE,EAAED,CAAC,EAAE;MAC/D,IAAIG,MAAM,GAAGpB,UAAU,CAACC,EAAE,EAAEgB,CAAC,CAAC;MAC9B,IAAIG,MAAM,IAAI,CAAC,CAAC,EAAE,CAClB,CAAC,MAAM,IAAIA,MAAM,GAAGN,QAAQ,EAAE;QAC5B;QACAE,cAAc,GAAGC,CAAC;MACpB,CAAC,MAAM;QACL;QACA;QACA;QACA;MACF;IACF;IACA,IAAID,cAAc,EAAE,OAAO;MACzBK,IAAI,EAAEtB,UAAU,CAACU,GAAG,CAACI,KAAK,CAACE,IAAI,EAAEd,EAAE,CAACG,OAAO,CAACS,KAAK,CAACE,IAAI,CAAC,CAACO,MAAM,CAAC;MAC/DC,EAAE,EAAExB,UAAU,CAACU,GAAG,CAACO,cAAc,EAAEf,EAAE,CAACG,OAAO,CAACY,cAAc,CAAC,CAACM,MAAM;IACtE,CAAC;EACH,CAAC,CAAC;AAEF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}