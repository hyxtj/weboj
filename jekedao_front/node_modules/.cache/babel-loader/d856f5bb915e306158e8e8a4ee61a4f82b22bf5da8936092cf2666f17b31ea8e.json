{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'NavBar',\n  data() {\n    return {\n      isLoggedIn: false,\n      username: '',\n      userId: null,\n      menuVisible: false\n    };\n  },\n  created() {\n    this.checkLoginStatus();\n    window.addEventListener('user-login-status-change', this.checkLoginStatus);\n  },\n  beforeDestroy() {\n    window.removeEventListener('user-login-status-change', this.checkLoginStatus);\n  },\n  methods: {\n    toggleMenu() {\n      this.menuVisible = !this.menuVisible;\n    },\n    handleClose(done) {\n      this.menuVisible = false;\n      done();\n    },\n    logout() {\n      // 删除 Token\n      localStorage.removeItem('access_token');\n      // 清除 Axios 默认头\n      delete this.$axios.defaults.headers.common['Authorization'];\n      this.isLoggedIn = false;\n      this.username = '';\n      this.userId = null;\n      this.$message.success('退出登录成功');\n      this.navigateTo('/login');\n      // 触发全局事件，通知其他组件\n      const event = new Event('user-login-status-change');\n      window.dispatchEvent(event);\n    },\n    navigateTo(path) {\n      this.$router.push(path);\n    },\n    navigateToProfile() {\n      if (this.userId) {\n        this.navigateTo(`/profile/${this.userId}`);\n      } else {\n        this.$message.error('无法获取用户信息');\n      }\n    },\n    checkLoginStatus() {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        this.isLoggedIn = true;\n        // 获取用户信息（例如用户名和用户ID）\n        this.$axios.get('/profile/me') // 使用 this.$axios\n        .then(response => {\n          if (response.data.code === 200) {\n            this.username = response.data.data.username;\n            this.userId = response.data.data.id;\n          } else {\n            this.isLoggedIn = false;\n            this.userId = null;\n          }\n        }).catch(() => {\n          this.isLoggedIn = false;\n          this.userId = null;\n        });\n      } else {\n        this.isLoggedIn = false;\n        this.userId = null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","isLoggedIn","username","userId","menuVisible","created","checkLoginStatus","window","addEventListener","beforeDestroy","removeEventListener","methods","toggleMenu","handleClose","done","logout","localStorage","removeItem","$axios","defaults","headers","common","$message","success","navigateTo","event","Event","dispatchEvent","path","$router","push","navigateToProfile","error","token","getItem","get","then","response","code","id","catch"],"sources":["src/components/NavBar.vue"],"sourcesContent":["<!-- src/components/NavBar.vue -->\r\n\r\n<template>\r\n  <div class=\"navbar\">\r\n    <el-button type=\"primary\" @click=\"toggleMenu\">菜单</el-button>\r\n    <el-dropdown v-if=\"isLoggedIn\" @command=\"handleCommand\">\r\n      <span class=\"el-dropdown-link\">\r\n        {{ username }}<i class=\"el-icon-arrow-down el-icon--right\"></i>\r\n      </span>\r\n      <el-dropdown-menu slot=\"dropdown\">\r\n        <el-dropdown-item command=\"profile\">个人资料</el-dropdown-item>\r\n        <el-dropdown-item command=\"logout\">退出登录</el-dropdown-item>\r\n      </el-dropdown-menu>\r\n    </el-dropdown>\r\n    <el-button v-else type=\"text\" @click=\"navigateTo('/login')\">登录</el-button>\r\n    <el-button v-if=\"!isLoggedIn\" type=\"text\" @click=\"navigateTo('/register')\">注册</el-button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'NavBar',\r\n  data() {\r\n    return {\r\n      isLoggedIn: false,\r\n      username: '',\r\n      userId: null,\r\n      menuVisible: false,\r\n    };\r\n  },\r\n  created() {\r\n    this.checkLoginStatus();\r\n    window.addEventListener('user-login-status-change', this.checkLoginStatus);\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('user-login-status-change', this.checkLoginStatus);\r\n  },\r\n  methods: {\r\n    toggleMenu() {\r\n      this.menuVisible = !this.menuVisible;\r\n    },\r\n    handleClose(done) {\r\n      this.menuVisible = false;\r\n      done();\r\n    },\r\n    logout() {\r\n      // 删除 Token\r\n      localStorage.removeItem('access_token');\r\n      // 清除 Axios 默认头\r\n      delete this.$axios.defaults.headers.common['Authorization'];\r\n      this.isLoggedIn = false;\r\n      this.username = '';\r\n      this.userId = null;\r\n      this.$message.success('退出登录成功');\r\n      this.navigateTo('/login');\r\n      // 触发全局事件，通知其他组件\r\n      const event = new Event('user-login-status-change');\r\n      window.dispatchEvent(event);\r\n    },\r\n    navigateTo(path) {\r\n      this.$router.push(path);\r\n    },\r\n    navigateToProfile() {\r\n      if (this.userId) {\r\n        this.navigateTo(`/profile/${this.userId}`);\r\n      } else {\r\n        this.$message.error('无法获取用户信息');\r\n      }\r\n    },\r\n    checkLoginStatus() {\r\n      const token = localStorage.getItem('access_token');\r\n      if (token) {\r\n        this.isLoggedIn = true;\r\n        // 获取用户信息（例如用户名和用户ID）\r\n        this.$axios.get('/profile/me') // 使用 this.$axios\r\n          .then(response => {\r\n            if (response.data.code === 200) {\r\n              this.username = response.data.data.username;\r\n              this.userId = response.data.data.id;\r\n            } else {\r\n              this.isLoggedIn = false;\r\n              this.userId = null;\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.isLoggedIn = false;\r\n            this.userId = null;\r\n          });\r\n      } else {\r\n        this.isLoggedIn = false;\r\n        this.userId = null;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.navbar {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px 20px;\r\n  background-color: #409EFF;\r\n  color: white;\r\n}\r\n\r\n.navbar .el-button {\r\n  margin-right: 10px;\r\n  color: white;\r\n  border-color: white;\r\n}\r\n\r\n.navbar .el-dropdown-link {\r\n  color: white;\r\n  cursor: pointer;\r\n}\r\n</style>"],"mappings":";AAoBA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,UAAA;MACAC,QAAA;MACAC,MAAA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;IACAC,MAAA,CAAAC,gBAAA,kCAAAF,gBAAA;EACA;EACAG,cAAA;IACAF,MAAA,CAAAG,mBAAA,kCAAAJ,gBAAA;EACA;EACAK,OAAA;IACAC,WAAA;MACA,KAAAR,WAAA,SAAAA,WAAA;IACA;IACAS,YAAAC,IAAA;MACA,KAAAV,WAAA;MACAU,IAAA;IACA;IACAC,OAAA;MACA;MACAC,YAAA,CAAAC,UAAA;MACA;MACA,YAAAC,MAAA,CAAAC,QAAA,CAAAC,OAAA,CAAAC,MAAA;MACA,KAAApB,UAAA;MACA,KAAAC,QAAA;MACA,KAAAC,MAAA;MACA,KAAAmB,QAAA,CAAAC,OAAA;MACA,KAAAC,UAAA;MACA;MACA,MAAAC,KAAA,OAAAC,KAAA;MACAnB,MAAA,CAAAoB,aAAA,CAAAF,KAAA;IACA;IACAD,WAAAI,IAAA;MACA,KAAAC,OAAA,CAAAC,IAAA,CAAAF,IAAA;IACA;IACAG,kBAAA;MACA,SAAA5B,MAAA;QACA,KAAAqB,UAAA,kBAAArB,MAAA;MACA;QACA,KAAAmB,QAAA,CAAAU,KAAA;MACA;IACA;IACA1B,iBAAA;MACA,MAAA2B,KAAA,GAAAjB,YAAA,CAAAkB,OAAA;MACA,IAAAD,KAAA;QACA,KAAAhC,UAAA;QACA;QACA,KAAAiB,MAAA,CAAAiB,GAAA;QAAA,CACAC,IAAA,CAAAC,QAAA;UACA,IAAAA,QAAA,CAAArC,IAAA,CAAAsC,IAAA;YACA,KAAApC,QAAA,GAAAmC,QAAA,CAAArC,IAAA,CAAAA,IAAA,CAAAE,QAAA;YACA,KAAAC,MAAA,GAAAkC,QAAA,CAAArC,IAAA,CAAAA,IAAA,CAAAuC,EAAA;UACA;YACA,KAAAtC,UAAA;YACA,KAAAE,MAAA;UACA;QACA,GACAqC,KAAA;UACA,KAAAvC,UAAA;UACA,KAAAE,MAAA;QACA;MACA;QACA,KAAAF,UAAA;QACA,KAAAE,MAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}