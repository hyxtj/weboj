{"ast":null,"code":"import axios from '@/axios';\nimport CommentComponent from './CommentComponent.vue';\nexport default {\n  name: 'DiscussionDetail',\n  components: {\n    CommentComponent\n  },\n  data() {\n    return {\n      discussion: {}\n    };\n  },\n  created() {\n    // 获取路由参数中的讨论ID\n    const discussionId = this.$route.params.discussionId;\n    // 获取讨论详情\n    this.fetchDiscussion(discussionId);\n  },\n  methods: {\n    fetchDiscussion(discussionId) {\n      axios.get(`/discussions/${discussionId}`).then(response => {\n        if (response.data.code === 200) {\n          this.discussion = response.data.data;\n        } else {\n          this.$message.error(response.data.msg || '获取讨论详情失败');\n        }\n      }).catch(error => {\n        console.error('获取讨论详情失败:', error);\n        this.$message.error('获取讨论详情失败，请重试');\n      });\n    },\n    formatDate(dateStr) {\n      const date = new Date(dateStr);\n      return date.toLocaleString();\n    },\n    drawStars() {\n      var canvas = document.getElementById('canvas'),\n        ctx = canvas.getContext('2d'),\n        w = canvas.width = window.innerWidth,\n        h = canvas.height = window.innerHeight,\n        hue = 217,\n        stars = [],\n        count = 0,\n        maxStars = 1300;\n      var canvas2 = document.createElement('canvas'),\n        ctx2 = canvas2.getContext('2d');\n      canvas2.width = 100;\n      canvas2.height = 100;\n      var half = canvas2.width / 2,\n        gradient2 = ctx2.createRadialGradient(half, half, 0, half, half, half);\n      gradient2.addColorStop(0.025, '#CCC');\n      gradient2.addColorStop(0.1, 'hsl(' + hue + ', 61%, 33%)');\n      gradient2.addColorStop(0.25, 'hsl(' + hue + ', 64%, 6%)');\n      gradient2.addColorStop(1, 'transparent');\n      ctx2.fillStyle = gradient2;\n      ctx2.beginPath();\n      ctx2.arc(half, half, half, 0, Math.PI * 2);\n      ctx2.fill();\n      function random(min, max) {\n        if (arguments.length < 2) {\n          max = min;\n          min = 0;\n        }\n        if (min > max) {\n          var hold = max;\n          max = min;\n          min = hold;\n        }\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n      function maxOrbit(x, y) {\n        var max = Math.max(x, y),\n          diameter = Math.round(Math.sqrt(max * max + max * max));\n        return diameter / 2;\n      }\n      var Star = function () {\n        this.orbitRadius = random(maxOrbit(w, h));\n        this.radius = random(60, this.orbitRadius) / 8;\n        this.orbitX = w / 2;\n        this.orbitY = h / 2;\n        this.timePassed = random(0, maxStars);\n        this.speed = random(this.orbitRadius) / 500000;\n        this.alpha = random(2, 10) / 10;\n        count++;\n        stars[count] = this;\n      };\n      Star.prototype.draw = function () {\n        var x = Math.sin(this.timePassed) * this.orbitRadius + this.orbitX,\n          y = Math.cos(this.timePassed) * this.orbitRadius + this.orbitY,\n          twinkle = random(10);\n        if (twinkle === 1 && this.alpha > 0) {\n          this.alpha -= 0.05;\n        } else if (twinkle === 2 && this.alpha < 1) {\n          this.alpha += 0.05;\n        }\n        ctx.globalAlpha = this.alpha;\n        ctx.drawImage(canvas2, x - this.radius / 2, y - this.radius / 2, this.radius, this.radius);\n        this.timePassed += this.speed;\n      };\n      for (var i = 0; i < maxStars; i++) {\n        new Star();\n      }\n      function animation() {\n        ctx.globalCompositeOperation = 'source-over';\n        ctx.globalAlpha = 0.5;\n        ctx.fillStyle = 'hsla(' + hue + ', 64%, 6%, 2)';\n        ctx.fillRect(0, 0, w, h);\n        ctx.globalCompositeOperation = 'lighter';\n        for (var i = 1, l = stars.length; i < l; i++) {\n          stars[i].draw();\n        }\n        window.requestAnimationFrame(animation);\n      }\n      animation();\n    }\n  },\n  mounted() {\n    this.drawStars();\n  }\n};","map":{"version":3,"names":["axios","CommentComponent","name","components","data","discussion","created","discussionId","$route","params","fetchDiscussion","methods","get","then","response","code","$message","error","msg","catch","console","formatDate","dateStr","date","Date","toLocaleString","drawStars","canvas","document","getElementById","ctx","getContext","w","width","window","innerWidth","h","height","innerHeight","hue","stars","count","maxStars","canvas2","createElement","ctx2","half","gradient2","createRadialGradient","addColorStop","fillStyle","beginPath","arc","Math","PI","fill","random","min","max","arguments","length","hold","floor","maxOrbit","x","y","diameter","round","sqrt","Star","orbitRadius","radius","orbitX","orbitY","timePassed","speed","alpha","prototype","draw","sin","cos","twinkle","globalAlpha","drawImage","i","animation","globalCompositeOperation","fillRect","l","requestAnimationFrame","mounted"],"sources":["src/components/DiscussionDetail.vue"],"sourcesContent":["<template>\r\n  <div class=\"discussion-detail\">\r\n    <canvas id=\"canvas\" class=\"canvas\"></canvas>\r\n    <div class=\"content\">\r\n      <h1>{{ discussion.title }}</h1>\r\n      <p>作者: {{ discussion.author }}</p>\r\n      <p>发布时间: {{ formatDate(discussion.publish_time) }}</p>\r\n      <p>{{ discussion.content }}</p>\r\n      <!-- 添加评论组件 -->\r\n      <CommentComponent :discussionId=\"discussion.id\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from '@/axios';\r\nimport CommentComponent from './CommentComponent.vue';\r\n\r\nexport default {\r\n  name: 'DiscussionDetail',\r\n  components: {\r\n    CommentComponent\r\n  },\r\n  data() {\r\n    return {\r\n      discussion: {}\r\n    };\r\n  },\r\n  created() {\r\n    // 获取路由参数中的讨论ID\r\n    const discussionId = this.$route.params.discussionId;\r\n    // 获取讨论详情\r\n    this.fetchDiscussion(discussionId);\r\n  },\r\n  methods: {\r\n    fetchDiscussion(discussionId) {\r\n      axios.get(`/discussions/${discussionId}`)\r\n        .then(response => {\r\n          if (response.data.code === 200) {\r\n            this.discussion = response.data.data;\r\n          } else {\r\n            this.$message.error(response.data.msg || '获取讨论详情失败');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('获取讨论详情失败:', error);\r\n          this.$message.error('获取讨论详情失败，请重试');\r\n        });\r\n    },\r\n    formatDate(dateStr) {\r\n      const date = new Date(dateStr);\r\n      return date.toLocaleString();\r\n    },\r\n    drawStars() {\r\n      var canvas = document.getElementById('canvas'),\r\n        ctx = canvas.getContext('2d'),\r\n        w = canvas.width = window.innerWidth,\r\n        h = canvas.height = window.innerHeight,\r\n        hue = 217,\r\n        stars = [],\r\n        count = 0,\r\n        maxStars = 1300;\r\n\r\n      var canvas2 = document.createElement('canvas'),\r\n        ctx2 = canvas2.getContext('2d');\r\n      canvas2.width = 100;\r\n      canvas2.height = 100;\r\n      var half = canvas2.width / 2,\r\n        gradient2 = ctx2.createRadialGradient(half, half, 0, half, half, half);\r\n      gradient2.addColorStop(0.025, '#CCC');\r\n      gradient2.addColorStop(0.1, 'hsl(' + hue + ', 61%, 33%)');\r\n      gradient2.addColorStop(0.25, 'hsl(' + hue + ', 64%, 6%)');\r\n      gradient2.addColorStop(1, 'transparent');\r\n\r\n      ctx2.fillStyle = gradient2;\r\n      ctx2.beginPath();\r\n      ctx2.arc(half, half, half, 0, Math.PI * 2);\r\n      ctx2.fill();\r\n\r\n      function random(min, max) {\r\n        if (arguments.length < 2) {\r\n          max = min;\r\n          min = 0;\r\n        }\r\n\r\n        if (min > max) {\r\n          var hold = max;\r\n          max = min;\r\n          min = hold;\r\n        }\r\n\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n      }\r\n\r\n      function maxOrbit(x, y) {\r\n        var max = Math.max(x, y),\r\n          diameter = Math.round(Math.sqrt(max * max + max * max));\r\n        return diameter / 2;\r\n      }\r\n\r\n      var Star = function () {\r\n        this.orbitRadius = random(maxOrbit(w, h));\r\n        this.radius = random(60, this.orbitRadius) / 8;\r\n        this.orbitX = w / 2;\r\n        this.orbitY = h / 2;\r\n        this.timePassed = random(0, maxStars);\r\n        this.speed = random(this.orbitRadius) / 500000;\r\n        this.alpha = random(2, 10) / 10;\r\n\r\n        count++;\r\n        stars[count] = this;\r\n      }\r\n\r\n      Star.prototype.draw = function () {\r\n        var x = Math.sin(this.timePassed) * this.orbitRadius + this.orbitX,\r\n          y = Math.cos(this.timePassed) * this.orbitRadius + this.orbitY,\r\n          twinkle = random(10);\r\n\r\n        if (twinkle === 1 && this.alpha > 0) {\r\n          this.alpha -= 0.05;\r\n        } else if (twinkle === 2 && this.alpha < 1) {\r\n          this.alpha += 0.05;\r\n        }\r\n\r\n        ctx.globalAlpha = this.alpha;\r\n        ctx.drawImage(canvas2, x - this.radius / 2, y - this.radius / 2, this.radius, this.radius);\r\n        this.timePassed += this.speed;\r\n      }\r\n\r\n      for (var i = 0; i < maxStars; i++) {\r\n        new Star();\r\n      }\r\n\r\n      function animation() {\r\n        ctx.globalCompositeOperation = 'source-over';\r\n        ctx.globalAlpha = 0.5;\r\n        ctx.fillStyle = 'hsla(' + hue + ', 64%, 6%, 2)';\r\n        ctx.fillRect(0, 0, w, h)\r\n\r\n        ctx.globalCompositeOperation = 'lighter';\r\n        for (var i = 1, l = stars.length; i < l; i++) {\r\n          stars[i].draw();\r\n        }\r\n\r\n        window.requestAnimationFrame(animation);\r\n      }\r\n\r\n      animation();\r\n    }\r\n  },\r\n  mounted() {\r\n    this.drawStars();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: 'KaiTi', serif;\r\n}\r\nbody,\r\nhtml {\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n.canvas {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: -6;\r\n  filter: alpha(opacity=20);\r\n}\r\n.discussion-detail {\r\n  padding: 20px;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.content {\r\n  background: rgba(0, 0, 0, 0.8);\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);\r\n  color: #fff;\r\n}\r\n\r\nh1 {\r\n  color: #fff;\r\n}\r\n\r\np {\r\n  color: #ddd;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}