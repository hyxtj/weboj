{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.registerGlobalHelper(\"fold\", \"comment\", function (mode) {\n    return mode.blockCommentStart && mode.blockCommentEnd;\n  }, function (cm, start) {\n    var mode = cm.getModeAt(start),\n      startToken = mode.blockCommentStart,\n      endToken = mode.blockCommentEnd;\n    if (!startToken || !endToken) return;\n    var line = start.line,\n      lineText = cm.getLine(line);\n    var startCh;\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(startToken, at - 1);\n      if (found == -1) {\n        if (pass == 1) return;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) return;\n      if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1))) && (found == 0 || lineText.slice(found - endToken.length, found) == endToken || !/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found))))) {\n        startCh = found + startToken.length;\n        break;\n      }\n      at = found - 1;\n    }\n    var depth = 1,\n      lastLine = cm.lastLine(),\n      end,\n      endCh;\n    outer: for (var i = line; i <= lastLine; ++i) {\n      var text = cm.getLine(i),\n        pos = i == line ? startCh : 0;\n      for (;;) {\n        var nextOpen = text.indexOf(startToken, pos),\n          nextClose = text.indexOf(endToken, pos);\n        if (nextOpen < 0) nextOpen = text.length;\n        if (nextClose < 0) nextClose = text.length;\n        pos = Math.min(nextOpen, nextClose);\n        if (pos == text.length) break;\n        if (pos == nextOpen) ++depth;else if (! --depth) {\n          end = i;\n          endCh = pos;\n          break outer;\n        }\n        ++pos;\n      }\n    }\n    if (end == null || line == end && endCh == startCh) return;\n    return {\n      from: CodeMirror.Pos(line, startCh),\n      to: CodeMirror.Pos(end, endCh)\n    };\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","registerGlobalHelper","mode","blockCommentStart","blockCommentEnd","cm","start","getModeAt","startToken","endToken","line","lineText","getLine","startCh","at","ch","pass","found","lastIndexOf","length","test","getTokenTypeAt","Pos","slice","depth","lastLine","end","endCh","outer","i","text","pos","nextOpen","indexOf","nextClose","Math","min","from","to"],"sources":["D:/web2/jekedao_front/node_modules/codemirror/addon/fold/comment-fold.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerGlobalHelper(\"fold\", \"comment\", function(mode) {\n  return mode.blockCommentStart && mode.blockCommentEnd;\n}, function(cm, start) {\n  var mode = cm.getModeAt(start), startToken = mode.blockCommentStart, endToken = mode.blockCommentEnd;\n  if (!startToken || !endToken) return;\n  var line = start.line, lineText = cm.getLine(line);\n\n  var startCh;\n  for (var at = start.ch, pass = 0;;) {\n    var found = at <= 0 ? -1 : lineText.lastIndexOf(startToken, at - 1);\n    if (found == -1) {\n      if (pass == 1) return;\n      pass = 1;\n      at = lineText.length;\n      continue;\n    }\n    if (pass == 1 && found < start.ch) return;\n    if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1))) &&\n        (found == 0 || lineText.slice(found - endToken.length, found) == endToken ||\n         !/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found))))) {\n      startCh = found + startToken.length;\n      break;\n    }\n    at = found - 1;\n  }\n\n  var depth = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (pos == nextOpen) ++depth;\n      else if (!--depth) { end = i; endCh = pos; break outer; }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}