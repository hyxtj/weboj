{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'UploadProblem',\n  data() {\n    return {\n      form: {\n        id: '',\n        title: '',\n        description: '',\n        difficulty: 'Medium' // 默认值\n      },\n      existingIds: [],\n      loading: false,\n      rules: {\n        id: [{\n          required: true,\n          message: '请输入题目ID',\n          trigger: 'blur'\n        }, {\n          type: 'number',\n          message: '题目ID必须是数字',\n          trigger: 'blur'\n        }, {\n          validator: (rule, value, callback) => {\n            if (this.existingIds.includes(value)) {\n              callback(new Error('题目ID已存在，请选择其他ID'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        title: [{\n          required: true,\n          message: '请输入题目标题',\n          trigger: 'blur'\n        }, {\n          min: 5,\n          message: '标题至少为5个字符',\n          trigger: 'blur'\n        }],\n        description: [{\n          required: true,\n          message: '请输入题目描述',\n          trigger: 'blur'\n        }, {\n          min: 10,\n          message: '描述至少为10个字符',\n          trigger: 'blur'\n        }],\n        difficulty: [{\n          required: true,\n          message: '请选择难度',\n          trigger: 'change'\n        }, {\n          validator: (rule, value, callback) => {\n            const validDifficulties = ['Easy', 'Medium', 'Hard'];\n            if (!validDifficulties.includes(value)) {\n              callback(new Error('请选择有效的难度级别'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  created() {\n    this.fetchExistingIds();\n  },\n  methods: {\n    fetchExistingIds() {\n      axios.get('/problems', {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('access_token')}`\n        }\n      }).then(response => {\n        if (response.data.code === 200) {\n          this.existingIds = response.data.data.map(problem => problem.id);\n        } else {\n          this.$message.error('无法获取现有题目ID');\n        }\n      }).catch(error => {\n        console.error('获取现有题目ID失败:', error);\n        this.$message.error('获取现有题目ID失败');\n      });\n    },\n    submitForm() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          this.loading = true;\n          axios.post('/problems', {\n            id: this.form.id,\n            title: this.form.title,\n            description: this.form.description,\n            difficulty: this.form.difficulty\n          }, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('access_token')}`\n            }\n          }).then(response => {\n            this.loading = false;\n            if (response.data.code === 200) {\n              this.$message.success('题目上传成功！');\n              this.existingIds.push(this.form.id);\n              this.resetForm();\n            } else {\n              this.$message.error(response.data.message || '题目上传失败');\n            }\n          }).catch(error => {\n            this.loading = false;\n            console.error('题目上传失败:', error);\n            this.$message.error(error.response?.data?.message || '题目上传失败，请重试');\n          });\n        } else {\n          this.$message.error('请完成表单字段的填写');\n          return false;\n        }\n      });\n    },\n    resetForm() {\n      this.$refs.form.resetFields();\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","form","id","title","description","difficulty","existingIds","loading","rules","required","message","trigger","type","validator","rule","value","callback","includes","Error","min","validDifficulties","created","fetchExistingIds","methods","get","headers","Authorization","localStorage","getItem","then","response","code","map","problem","$message","error","catch","console","submitForm","$refs","validate","valid","post","success","push","resetForm","resetFields"],"sources":["src/components/UploadProblem.vue"],"sourcesContent":["<template>\r\n  <div class=\"upload-problem\">\r\n    <h1>上传题目</h1>\r\n    <el-form\r\n      ref=\"form\"\r\n      :model=\"form\"\r\n      :rules=\"rules\"\r\n      label-width=\"80px\"\r\n      @submit.native.prevent=\"submitForm\"\r\n    >\r\n      <el-form-item label=\"题目ID\" prop=\"id\">\r\n        <el-input\r\n          v-model.number=\"form.id\"\r\n          type=\"number\"\r\n          placeholder=\"请输入题目ID\"\r\n        ></el-input>\r\n      </el-form-item>\r\n\r\n      <el-form-item label=\"题目标题\" prop=\"title\">\r\n        <el-input v-model=\"form.title\" placeholder=\"请输入题目标题\"></el-input>\r\n      </el-form-item>\r\n\r\n      <el-form-item label=\"题目描述\" prop=\"description\">\r\n        <el-input\r\n          type=\"textarea\"\r\n          v-model=\"form.description\"\r\n          placeholder=\"请输入题目描述\"\r\n          :rows=\"10\"\r\n        ></el-input>\r\n      </el-form-item>\r\n\r\n      <el-form-item label=\"难度\" prop=\"difficulty\">\r\n        <el-select v-model=\"form.difficulty\" placeholder=\"请选择难度\">\r\n          <el-option label=\"Easy\" value=\"Easy\"></el-option>\r\n          <el-option label=\"Medium\" value=\"Medium\"></el-option>\r\n          <el-option label=\"Hard\" value=\"Hard\"></el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n\r\n      <el-form-item>\r\n        <el-button type=\"primary\" :loading=\"loading\" @click=\"submitForm\">\r\n          提交\r\n        </el-button>\r\n        <el-button @click=\"resetForm\">重置</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'UploadProblem',\r\n  data() {\r\n    return {\r\n      form: {\r\n        id: '',\r\n        title: '',\r\n        description: '',\r\n        difficulty: 'Medium', // 默认值\r\n      },\r\n      existingIds: [],\r\n      loading: false,\r\n      rules: {\r\n        id: [\r\n          { required: true, message: '请输入题目ID', trigger: 'blur' },\r\n          { type: 'number', message: '题目ID必须是数字', trigger: 'blur' },\r\n          {\r\n            validator: (rule, value, callback) => {\r\n              if (this.existingIds.includes(value)) {\r\n                callback(new Error('题目ID已存在，请选择其他ID'));\r\n              } else {\r\n                callback();\r\n              }\r\n            },\r\n            trigger: 'blur',\r\n          },\r\n        ],\r\n        title: [\r\n          { required: true, message: '请输入题目标题', trigger: 'blur' },\r\n          { min: 5, message: '标题至少为5个字符', trigger: 'blur' },\r\n        ],\r\n        description: [\r\n          { required: true, message: '请输入题目描述', trigger: 'blur' },\r\n          { min: 10, message: '描述至少为10个字符', trigger: 'blur' },\r\n        ],\r\n        difficulty: [\r\n          { required: true, message: '请选择难度', trigger: 'change' },\r\n          {\r\n            validator: (rule, value, callback) => {\r\n              const validDifficulties = ['Easy', 'Medium', 'Hard'];\r\n              if (!validDifficulties.includes(value)) {\r\n                callback(new Error('请选择有效的难度级别'));\r\n              } else {\r\n                callback();\r\n              }\r\n            },\r\n            trigger: 'change',\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchExistingIds();\r\n  },\r\n  methods: {\r\n    fetchExistingIds() {\r\n      axios\r\n        .get('/problems', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('access_token')}`,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          if (response.data.code === 200) {\r\n            this.existingIds = response.data.data.map((problem) => problem.id);\r\n          } else {\r\n            this.$message.error('无法获取现有题目ID');\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('获取现有题目ID失败:', error);\r\n          this.$message.error('获取现有题目ID失败');\r\n        });\r\n    },\r\n    submitForm() {\r\n      this.$refs.form.validate((valid) => {\r\n        if (valid) {\r\n          this.loading = true;\r\n          axios\r\n            .post(\r\n              '/problems',\r\n              {\r\n                id: this.form.id,\r\n                title: this.form.title,\r\n                description: this.form.description,\r\n                difficulty: this.form.difficulty,\r\n              },\r\n              {\r\n                headers: {\r\n                  Authorization: `Bearer ${localStorage.getItem('access_token')}`,\r\n                },\r\n              }\r\n            )\r\n            .then((response) => {\r\n              this.loading = false;\r\n              if (response.data.code === 200) {\r\n                this.$message.success('题目上传成功！');\r\n                this.existingIds.push(this.form.id);\r\n                this.resetForm();\r\n              } else {\r\n                this.$message.error(response.data.message || '题目上传失败');\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              this.loading = false;\r\n              console.error('题目上传失败:', error);\r\n              this.$message.error(\r\n                error.response?.data?.message || '题目上传失败，请重试'\r\n              );\r\n            });\r\n        } else {\r\n          this.$message.error('请完成表单字段的填写');\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    resetForm() {\r\n      this.$refs.form.resetFields();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.upload-problem {\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}