{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"@/axios\"; // 使用配置好的 Axios 实例\n\nexport default {\n  name: \"UploadSolution\",\n  data() {\n    return {\n      form: {\n        problemId: null,\n        solution: \"\"\n      },\n      loading: false,\n      rules: {\n        problemId: [{\n          required: true,\n          message: \"请输入题目ID\",\n          trigger: \"blur\"\n        }, {\n          type: \"number\",\n          message: \"题目ID必须是数字\",\n          trigger: \"blur\"\n        }, {\n          validator: (rule, value, callback) => {\n            if (value === null || value === undefined) {\n              callback(new Error(\"题目ID为必填项\"));\n            } else if (typeof value !== \"number\") {\n              callback(new Error(\"题目ID必须是数字\"));\n            } else if (value <= 0) {\n              callback(new Error(\"题目ID必须大于0\"));\n            } else {\n              callback();\n            }\n          },\n          trigger: \"blur\"\n        }],\n        solution: [{\n          required: true,\n          message: \"请输入题解内容\",\n          trigger: \"blur\"\n        }, {\n          min: 10,\n          message: \"题解内容长度至少10个字符\",\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  methods: {\n    submitForm() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          this.loading = true;\n          axios.post(\"/uploadsolutions\", {\n            problemId: this.form.problemId,\n            solution: this.form.solution\n          }).then(response => {\n            this.loading = false;\n            if (response.data.code === 201) {\n              this.$message.success(\"题解上传成功！\");\n              this.resetForm();\n              this.$router.push(\"/problemset\"); // 确保跳转路径正确\n            } else {\n              this.$message.error(response.data.msg || \"题解上传失败\");\n            }\n          }).catch(error => {\n            this.loading = false;\n            console.error(\"题解上传失败:\", error);\n            if (error.response) {\n              console.error(\"响应数据:\", error.response.data);\n              console.error(\"响应状态:\", error.response.status);\n              console.error(\"响应头:\", error.response.headers);\n              this.$message.error(error.response.data.msg || \"题解上传失败\");\n            } else if (error.request) {\n              console.error(\"请求数据:\", error.request);\n              this.$message.error(\"未收到服务器响应，请检查网络连接\");\n            } else {\n              console.error(\"错误信息:\", error.message);\n              this.$message.error(\"发生错误，请重试\");\n            }\n          });\n        } else {\n          this.$message.error(\"请完成表单字段的填写\");\n          return false;\n        }\n      });\n    },\n    resetForm() {\n      this.$refs.form.resetFields();\n    },\n    drawStars() {\n      const canvas = document.getElementById(\"starfield\");\n      const context = canvas.getContext(\"2d\");\n      let stars = [];\n      const starsCount = 300;\n      function init() {\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        stars = [];\n        createStars();\n      }\n      function createStars() {\n        for (let i = 0; i < starsCount; i++) {\n          const x = Math.random() * canvas.width;\n          const y = Math.random() * canvas.height;\n          const radius = Math.random() * 1.5;\n          const color = `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 0.8)`;\n          const speed = Math.random() * 0.5;\n          stars.push({\n            x,\n            y,\n            radius,\n            color,\n            speed\n          });\n        }\n      }\n      function animate() {\n        context.fillStyle = \"#0e1729\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        stars.forEach(star => {\n          star.x -= star.speed;\n          if (star.x < -star.radius) star.x = canvas.width + star.radius;\n          context.beginPath();\n          context.arc(star.x, star.y, star.radius, 0, Math.PI * 2);\n          context.fillStyle = star.color;\n          context.fill();\n        });\n        requestAnimationFrame(animate);\n      }\n      window.addEventListener(\"resize\", init);\n      init();\n      animate();\n    }\n  },\n  mounted() {\n    this.drawStars();\n  }\n};","map":{"version":3,"names":["axios","name","data","form","problemId","solution","loading","rules","required","message","trigger","type","validator","rule","value","callback","undefined","Error","min","methods","submitForm","$refs","validate","valid","post","then","response","code","$message","success","resetForm","$router","push","error","msg","catch","console","status","headers","request","resetFields","drawStars","canvas","document","getElementById","context","getContext","stars","starsCount","init","width","window","innerWidth","height","innerHeight","createStars","i","x","Math","random","y","radius","color","floor","speed","animate","fillStyle","fillRect","forEach","star","beginPath","arc","PI","fill","requestAnimationFrame","addEventListener","mounted"],"sources":["src/components/UploadSolution.vue"],"sourcesContent":["<template>\r\n  <div class=\"upload-solution\">\r\n    <canvas id=\"starfield\"></canvas>\r\n    <div class=\"content\">\r\n      <h1>上传题解</h1>\r\n      <el-form\r\n        ref=\"form\"\r\n        :model=\"form\"\r\n        :rules=\"rules\"\r\n        label-width=\"80px\"\r\n        @submit.native.prevent=\"submitForm\"\r\n      >\r\n        <el-form-item label=\"题目ID\" prop=\"problemId\">\r\n          <el-input\r\n            v-model.number=\"form.problemId\"\r\n            placeholder=\"请输入题目ID\"\r\n            type=\"number\"\r\n          ></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"题解内容\" prop=\"solution\">\r\n          <el-input\r\n            type=\"textarea\"\r\n            v-model=\"form.solution\"\r\n            placeholder=\"请输入题解内容\"\r\n            :rows=\"5\"\r\n          ></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item>\r\n          <el-button\r\n            type=\"primary\"\r\n            @click=\"submitForm\"\r\n            :loading=\"loading\"\r\n            class=\"submit-button\"\r\n          >\r\n            提交\r\n          </el-button>\r\n          <el-button @click=\"resetForm\" class=\"reset-button\">\r\n            重置\r\n          </el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"@/axios\"; // 使用配置好的 Axios 实例\r\n\r\nexport default {\r\n  name: \"UploadSolution\",\r\n  data() {\r\n    return {\r\n      form: {\r\n        problemId: null,\r\n        solution: \"\",\r\n      },\r\n      loading: false,\r\n      rules: {\r\n        problemId: [\r\n          { required: true, message: \"请输入题目ID\", trigger: \"blur\" },\r\n          { type: \"number\", message: \"题目ID必须是数字\", trigger: \"blur\" },\r\n          {\r\n            validator: (rule, value, callback) => {\r\n              if (value === null || value === undefined) {\r\n                callback(new Error(\"题目ID为必填项\"));\r\n              } else if (typeof value !== \"number\") {\r\n                callback(new Error(\"题目ID必须是数字\"));\r\n              } else if (value <= 0) {\r\n                callback(new Error(\"题目ID必须大于0\"));\r\n              } else {\r\n                callback();\r\n              }\r\n            },\r\n            trigger: \"blur\",\r\n          },\r\n        ],\r\n        solution: [\r\n          { required: true, message: \"请输入题解内容\", trigger: \"blur\" },\r\n          { min: 10, message: \"题解内容长度至少10个字符\", trigger: \"blur\" },\r\n        ],\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    submitForm() {\r\n      this.$refs.form.validate((valid) => {\r\n        if (valid) {\r\n          this.loading = true;\r\n          axios\r\n            .post(\"/uploadsolutions\", {\r\n              problemId: this.form.problemId,\r\n              solution: this.form.solution,\r\n            })\r\n            .then((response) => {\r\n              this.loading = false;\r\n              if (response.data.code === 201) {\r\n                this.$message.success(\"题解上传成功！\");\r\n                this.resetForm();\r\n                this.$router.push(\"/problemset\"); // 确保跳转路径正确\r\n              } else {\r\n                this.$message.error(response.data.msg || \"题解上传失败\");\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              this.loading = false;\r\n              console.error(\"题解上传失败:\", error);\r\n              if (error.response) {\r\n                console.error(\"响应数据:\", error.response.data);\r\n                console.error(\"响应状态:\", error.response.status);\r\n                console.error(\"响应头:\", error.response.headers);\r\n                this.$message.error(\r\n                  error.response.data.msg || \"题解上传失败\"\r\n                );\r\n              } else if (error.request) {\r\n                console.error(\"请求数据:\", error.request);\r\n                this.$message.error(\"未收到服务器响应，请检查网络连接\");\r\n              } else {\r\n                console.error(\"错误信息:\", error.message);\r\n                this.$message.error(\"发生错误，请重试\");\r\n              }\r\n            });\r\n        } else {\r\n          this.$message.error(\"请完成表单字段的填写\");\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    resetForm() {\r\n      this.$refs.form.resetFields();\r\n    },\r\n    drawStars() {\r\n      const canvas = document.getElementById(\"starfield\");\r\n      const context = canvas.getContext(\"2d\");\r\n      let stars = [];\r\n      const starsCount = 300;\r\n\r\n      function init() {\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        stars = [];\r\n        createStars();\r\n      }\r\n\r\n      function createStars() {\r\n        for (let i = 0; i < starsCount; i++) {\r\n          const x = Math.random() * canvas.width;\r\n          const y = Math.random() * canvas.height;\r\n          const radius = Math.random() * 1.5;\r\n          const color = `rgba(${Math.floor(\r\n            Math.random() * 255\r\n          )}, ${Math.floor(Math.random() * 255)}, ${Math.floor(\r\n            Math.random() * 255\r\n          )}, 0.8)`;\r\n          const speed = Math.random() * 0.5;\r\n          stars.push({ x, y, radius, color, speed });\r\n        }\r\n      }\r\n\r\n      function animate() {\r\n        context.fillStyle = \"#0e1729\";\r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n        stars.forEach((star) => {\r\n          star.x -= star.speed;\r\n          if (star.x < -star.radius) star.x = canvas.width + star.radius;\r\n          context.beginPath();\r\n          context.arc(star.x, star.y, star.radius, 0, Math.PI * 2);\r\n          context.fillStyle = star.color;\r\n          context.fill();\r\n        });\r\n        requestAnimationFrame(animate);\r\n      }\r\n\r\n      window.addEventListener(\"resize\", init);\r\n      init();\r\n      animate();\r\n    },\r\n  },\r\n  mounted() {\r\n    this.drawStars();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  font-family: 'KaiTi', serif;\r\n}\r\n\r\nhtml,\r\nbody,\r\n#app {\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\ncanvas#starfield {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: -6;\r\n  background: #0e1729;\r\n}\r\n\r\n.upload-solution {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  position: relative;\r\n  padding: 20px;\r\n}\r\n\r\n.content {\r\n  background: rgba(255, 255, 255, 0.95);\r\n  padding: 30px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\r\n  color: #333;\r\n  width: 100%;\r\n  max-width: 700px;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  color: #333;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.el-form-item {\r\n  margin-bottom: 25px;\r\n}\r\n\r\n.submit-button,\r\n.reset-button {\r\n  height: 50px;\r\n  font-size: 18px;\r\n  border-radius: 8px;\r\n  width: 48%;\r\n}\r\n\r\n.reset-button {\r\n  margin-left: 4%;\r\n  background-color: #f5f5f5;\r\n  color: #333;\r\n}\r\n\r\n.submit-button {\r\n  background-color: #409eff;\r\n  color: #fff;\r\n}\r\n\r\n.submit-button:hover {\r\n  background-color: #66b1ff;\r\n}\r\n\r\n.reset-button:hover {\r\n  background-color: #e6e6e6;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}