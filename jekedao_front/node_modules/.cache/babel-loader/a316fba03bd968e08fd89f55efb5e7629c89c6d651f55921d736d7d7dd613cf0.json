{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'NavBar',\n  data() {\n    return {\n      menuVisible: false,\n      isLoggedIn: false,\n      username: '',\n      userId: null\n    };\n  },\n  computed: {\n    menuIcon() {\n      return this.menuVisible ? 'el-icon-close' : 'el-icon-menu';\n    }\n  },\n  created() {\n    this.checkLoginStatus();\n    // 监听全局事件，更新登录状态\n    window.addEventListener('user-login-status-change', this.checkLoginStatus);\n  },\n  beforeDestroy() {\n    window.removeEventListener('user-login-status-change', this.checkLoginStatus);\n  },\n  methods: {\n    toggleMenu() {\n      this.menuVisible = !this.menuVisible;\n    },\n    navigateTo(route) {\n      this.menuVisible = false;\n      this.$router.push(route).catch(err => {\n        console.error('路由跳转失败:', err);\n        this.menuVisible = true;\n      });\n    },\n    // 修改 handleClose 方法，接受 done 回调并正确调用它\n    handleClose(done) {\n      // 弹出确认对话框\n      this.$confirm('确定关闭导航菜单？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        done(); // 调用 done 回调以完成关闭\n      }).catch(() => {\n        // 用户取消关闭，不调用 done()，Drawer 保持开启\n      });\n    },\n    logout() {\n      // 删除 Token\n      localStorage.removeItem('access_token');\n      // 清除 Axios 默认头\n      delete this.$axios.defaults.headers.common['Authorization'];\n      this.isLoggedIn = false;\n      this.username = '';\n      this.userId = null;\n      this.$message.success('退出登录成功');\n      this.navigateTo('/login');\n      // 触发全局事件，通知其他组件\n      const event = new Event('user-login-status-change');\n      window.dispatchEvent(event);\n    },\n    checkLoginStatus() {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        this.isLoggedIn = true;\n        // 获取用户信息（例如用户名和用户ID）\n        this.$axios.get('/profile/me') // 使用 this.$axios\n        .then(response => {\n          if (response.data.code === 200) {\n            this.username = response.data.data.username;\n            this.userId = response.data.data.id;\n          } else {\n            this.isLoggedIn = false;\n            this.userId = null;\n          }\n        }).catch(() => {\n          this.isLoggedIn = false;\n          this.userId = null;\n        });\n      } else {\n        this.isLoggedIn = false;\n        this.userId = null;\n      }\n    },\n    navigateToProfile() {\n      if (this.userId) {\n        this.navigateTo(`/profile/${this.userId}`);\n      } else {\n        this.$message.error('无法获取用户信息');\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","menuVisible","isLoggedIn","username","userId","computed","menuIcon","created","checkLoginStatus","window","addEventListener","beforeDestroy","removeEventListener","methods","toggleMenu","navigateTo","route","$router","push","catch","err","console","error","handleClose","done","$confirm","confirmButtonText","cancelButtonText","type","then","logout","localStorage","removeItem","$axios","defaults","headers","common","$message","success","event","Event","dispatchEvent","token","getItem","get","response","code","id","navigateToProfile"],"sources":["src/components/NavBar.vue"],"sourcesContent":["<!-- src/components/NavBar.vue -->\r\n<template>\r\n  <div class=\"navbar\">\r\n    <el-button type=\"primary\" @click=\"toggleMenu\">\r\n      <i :class=\"menuIcon\"></i>\r\n    </el-button>\r\n    <el-drawer\r\n      title=\"导航菜单\"\r\n      :visible.sync=\"menuVisible\"\r\n      direction=\"ltr\"\r\n      size=\"20%\"\r\n      :wrapper-closable=\"false\"\r\n      :modal-append-to-body=\"false\"\r\n      :before-close=\"handleClose\"\r\n    >\r\n      <div class=\"menu\">\r\n        <el-button type=\"text\" @click=\"navigateTo('/')\">首页</el-button>\r\n        <el-button type=\"text\" @click=\"navigateTo('/square')\">广场</el-button>\r\n        <el-button type=\"text\" @click=\"navigateTo('/problemset')\">题库</el-button>\r\n        <el-button type=\"text\" @click=\"navigateTo('/problemlist')\">题单</el-button>\r\n        <el-button type=\"text\" @click=\"navigateTo('/contest')\">比赛</el-button>\r\n        <el-button type=\"text\" @click=\"navigateTo('/discussion')\">讨论</el-button>\r\n        <el-button type=\"text\" @click=\"navigateTo('/create-contest')\">发布比赛</el-button>\r\n        <el-button type=\"text\" @click=\"navigateTo('/upload')\">上传题目</el-button>\r\n        <el-button type=\"text\" @click=\"navigateTo('/create-problemlist')\">设计题单</el-button>\r\n        <el-button type=\"text\" @click=\"navigateTo('/solutions')\">我的题解</el-button> <!-- 新增 -->\r\n\r\n        <template v-if=\"!isLoggedIn\">\r\n          <el-divider></el-divider>\r\n          <el-button type=\"text\" @click=\"navigateTo('/login')\">登录</el-button>\r\n          <el-button type=\"text\" @click=\"navigateTo('/register')\">注册</el-button>\r\n        </template>\r\n        <template v-else>\r\n          <el-divider></el-divider>\r\n          <el-button type=\"text\" @click=\"navigateToProfile\">个人主页</el-button>\r\n          <el-button type=\"text\" @click=\"logout\">退出登录</el-button>\r\n        </template>\r\n      </div>\r\n    </el-drawer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'NavBar',\r\n  data() {\r\n    return {\r\n      menuVisible: false,\r\n      isLoggedIn: false,\r\n      username: '',\r\n      userId: null\r\n    };\r\n  },\r\n  computed: {\r\n    menuIcon() {\r\n      return this.menuVisible ? 'el-icon-close' : 'el-icon-menu';\r\n    }\r\n  },\r\n  created() {\r\n    this.checkLoginStatus();\r\n    // 监听全局事件，更新登录状态\r\n    window.addEventListener('user-login-status-change', this.checkLoginStatus);\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('user-login-status-change', this.checkLoginStatus);\r\n  },\r\n  methods: {\r\n    toggleMenu() {\r\n      this.menuVisible = !this.menuVisible;\r\n    },\r\n    navigateTo(route) {\r\n      this.menuVisible = false;\r\n      this.$router.push(route).catch(err => {\r\n        console.error('路由跳转失败:', err);\r\n        this.menuVisible = true;\r\n      });\r\n    },\r\n    // 修改 handleClose 方法，接受 done 回调并正确调用它\r\n    handleClose(done) {\r\n      // 弹出确认对话框\r\n      this.$confirm('确定关闭导航菜单？', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }).then(() => {\r\n        done(); // 调用 done 回调以完成关闭\r\n      }).catch(() => {\r\n        // 用户取消关闭，不调用 done()，Drawer 保持开启\r\n      });\r\n    },\r\n    logout() {\r\n      // 删除 Token\r\n      localStorage.removeItem('access_token');\r\n      // 清除 Axios 默认头\r\n      delete this.$axios.defaults.headers.common['Authorization'];\r\n      this.isLoggedIn = false;\r\n      this.username = '';\r\n      this.userId = null;\r\n      this.$message.success('退出登录成功');\r\n      this.navigateTo('/login');\r\n      // 触发全局事件，通知其他组件\r\n      const event = new Event('user-login-status-change');\r\n      window.dispatchEvent(event);\r\n    },\r\n    checkLoginStatus() {\r\n      const token = localStorage.getItem('access_token');\r\n      if (token) {\r\n        this.isLoggedIn = true;\r\n        // 获取用户信息（例如用户名和用户ID）\r\n        this.$axios.get('/profile/me') // 使用 this.$axios\r\n          .then(response => {\r\n            if (response.data.code === 200) {\r\n              this.username = response.data.data.username;\r\n              this.userId = response.data.data.id;\r\n            } else {\r\n              this.isLoggedIn = false;\r\n              this.userId = null;\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.isLoggedIn = false;\r\n            this.userId = null;\r\n          });\r\n      } else {\r\n        this.isLoggedIn = false;\r\n        this.userId = null;\r\n      }\r\n    },\r\n    navigateToProfile() {\r\n      if (this.userId) {\r\n        this.navigateTo(`/profile/${this.userId}`);\r\n      } else {\r\n        this.$message.error('无法获取用户信息');\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.navbar {\r\n  position: fixed;\r\n  top: 10px;\r\n  left: 10px;\r\n  z-index: 1000; /* 确保按钮置于所有层的上方 */\r\n}\r\n\r\n.menu {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 20px;\r\n}\r\n\r\n.el-divider {\r\n  margin: 10px 0;\r\n}\r\n</style>"],"mappings":";AA2CA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,UAAA;MACAC,QAAA;MACAC,MAAA;IACA;EACA;EACAC,QAAA;IACAC,SAAA;MACA,YAAAL,WAAA;IACA;EACA;EACAM,QAAA;IACA,KAAAC,gBAAA;IACA;IACAC,MAAA,CAAAC,gBAAA,kCAAAF,gBAAA;EACA;EACAG,cAAA;IACAF,MAAA,CAAAG,mBAAA,kCAAAJ,gBAAA;EACA;EACAK,OAAA;IACAC,WAAA;MACA,KAAAb,WAAA,SAAAA,WAAA;IACA;IACAc,WAAAC,KAAA;MACA,KAAAf,WAAA;MACA,KAAAgB,OAAA,CAAAC,IAAA,CAAAF,KAAA,EAAAG,KAAA,CAAAC,GAAA;QACAC,OAAA,CAAAC,KAAA,YAAAF,GAAA;QACA,KAAAnB,WAAA;MACA;IACA;IACA;IACAsB,YAAAC,IAAA;MACA;MACA,KAAAC,QAAA;QACAC,iBAAA;QACAC,gBAAA;QACAC,IAAA;MACA,GAAAC,IAAA;QACAL,IAAA;MACA,GAAAL,KAAA;QACA;MAAA,CACA;IACA;IACAW,OAAA;MACA;MACAC,YAAA,CAAAC,UAAA;MACA;MACA,YAAAC,MAAA,CAAAC,QAAA,CAAAC,OAAA,CAAAC,MAAA;MACA,KAAAlC,UAAA;MACA,KAAAC,QAAA;MACA,KAAAC,MAAA;MACA,KAAAiC,QAAA,CAAAC,OAAA;MACA,KAAAvB,UAAA;MACA;MACA,MAAAwB,KAAA,OAAAC,KAAA;MACA/B,MAAA,CAAAgC,aAAA,CAAAF,KAAA;IACA;IACA/B,iBAAA;MACA,MAAAkC,KAAA,GAAAX,YAAA,CAAAY,OAAA;MACA,IAAAD,KAAA;QACA,KAAAxC,UAAA;QACA;QACA,KAAA+B,MAAA,CAAAW,GAAA;QAAA,CACAf,IAAA,CAAAgB,QAAA;UACA,IAAAA,QAAA,CAAA7C,IAAA,CAAA8C,IAAA;YACA,KAAA3C,QAAA,GAAA0C,QAAA,CAAA7C,IAAA,CAAAA,IAAA,CAAAG,QAAA;YACA,KAAAC,MAAA,GAAAyC,QAAA,CAAA7C,IAAA,CAAAA,IAAA,CAAA+C,EAAA;UACA;YACA,KAAA7C,UAAA;YACA,KAAAE,MAAA;UACA;QACA,GACAe,KAAA;UACA,KAAAjB,UAAA;UACA,KAAAE,MAAA;QACA;MACA;QACA,KAAAF,UAAA;QACA,KAAAE,MAAA;MACA;IACA;IACA4C,kBAAA;MACA,SAAA5C,MAAA;QACA,KAAAW,UAAA,kBAAAX,MAAA;MACA;QACA,KAAAiC,QAAA,CAAAf,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}