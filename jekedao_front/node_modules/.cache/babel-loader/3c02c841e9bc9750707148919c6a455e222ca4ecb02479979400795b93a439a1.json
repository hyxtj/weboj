{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'ProblemSet',\n  data() {\n    return {\n      problems: [],\n      currentPage: 1,\n      pageSize: 10\n    };\n  },\n  computed: {\n    displayedProblems() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = this.currentPage * this.pageSize;\n      return this.problems.slice(start, end);\n    }\n  },\n  created() {\n    this.fetchProblems();\n  },\n  methods: {\n    getTagType(difficulty) {\n      switch (difficulty) {\n        case 'Easy':\n          return 'success';\n        case 'Medium':\n          return 'warning';\n        case 'Hard':\n          return 'danger';\n        default:\n          return 'info';\n      }\n    },\n    viewProblem(id) {\n      this.$router.push(`/problem/${id}`);\n    },\n    handleCurrentChange(page) {\n      this.currentPage = page;\n    },\n    fetchProblems() {\n      this.$axios.get('/problems').then(response => {\n        if (response.data.code === 200) {\n          this.problems = response.data.data.map(problem => ({\n            id: problem.id,\n            title: problem.title,\n            difficulty: problem.difficulty,\n            upload_time: problem.upload_time.split('T')[0] // 格式化日期\n          }));\n        } else {\n          this.$message.error(response.data.msg || '获取题目失败');\n        }\n      }).catch(error => {\n        console.error('获取题目失败:', error);\n        this.$message.error('获取题目失败，请重试');\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","problems","currentPage","pageSize","computed","displayedProblems","start","end","slice","created","fetchProblems","methods","getTagType","difficulty","viewProblem","id","$router","push","handleCurrentChange","page","$axios","get","then","response","code","map","problem","title","upload_time","split","$message","error","msg","catch","console"],"sources":["src/components/ProblemSet.vue"],"sourcesContent":["<!-- src/components/ProblemSet.vue -->\r\n\r\n<template>\r\n  <div class=\"problem-set\">\r\n    <h1>题库</h1>\r\n    <div v-if=\"problems.length === 0\" class=\"no-problems\">没有题目</div>\r\n    <el-row v-else>\r\n      <el-col :span=\"24\">\r\n        <el-table\r\n          :data=\"displayedProblems\"\r\n          border\r\n          style=\"width: 100%\">\r\n          <el-table-column prop=\"id\" label=\"题目ID\" width=\"100\">\r\n            <template #default=\"scope\">\r\n              <router-link :to=\"`/problem/${scope.row.id}`\">{{ scope.row.id }}</router-link>\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"title\" label=\"题目名称\" width=\"200\">\r\n            <template #default=\"scope\">\r\n              <router-link :to=\"`/problem/${scope.row.id}`\">{{ scope.row.title }}</router-link>\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"difficulty\" label=\"难度\" width=\"120\">\r\n            <template #default=\"scope\">\r\n              <el-tag :type=\"getTagType(scope.row.difficulty)\">{{ scope.row.difficulty }}</el-tag>\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"upload_time\" label=\"上传时间\" width=\"180\"></el-table-column>\r\n          <el-table-column label=\"操作\" width=\"120\">\r\n            <template #default=\"scope\">\r\n              <el-button @click=\"viewProblem(scope.row.id)\" type=\"primary\" size=\"small\">查看</el-button>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n        <div class=\"pagination\">\r\n          <el-pagination\r\n            @current-change=\"handleCurrentChange\"\r\n            :current-page=\"currentPage\"\r\n            :page-size=\"pageSize\"\r\n            layout=\"prev, pager, next\"\r\n            :total=\"problems.length\">\r\n          </el-pagination>\r\n        </div>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ProblemSet',\r\n  data() {\r\n    return {\r\n      problems: [],\r\n      currentPage: 1,\r\n      pageSize: 10,\r\n    };\r\n  },\r\n  computed: {\r\n    displayedProblems() {\r\n      const start = (this.currentPage - 1) * this.pageSize;\r\n      const end = this.currentPage * this.pageSize;\r\n      return this.problems.slice(start, end);\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchProblems();\r\n  },\r\n  methods: {\r\n    getTagType(difficulty) {\r\n      switch (difficulty) {\r\n        case 'Easy':\r\n          return 'success';\r\n        case 'Medium':\r\n          return 'warning';\r\n        case 'Hard':\r\n          return 'danger';\r\n        default:\r\n          return 'info';\r\n      }\r\n    },\r\n    viewProblem(id) {\r\n      this.$router.push(`/problem/${id}`);\r\n    },\r\n    handleCurrentChange(page) {\r\n      this.currentPage = page;\r\n    },\r\n    fetchProblems() {\r\n      this.$axios.get('/problems')\r\n        .then(response => {\r\n          if (response.data.code === 200) {\r\n            this.problems = response.data.data.map(problem => ({\r\n              id: problem.id,\r\n              title: problem.title,\r\n              difficulty: problem.difficulty,\r\n              upload_time: problem.upload_time.split('T')[0] // 格式化日期\r\n            }));\r\n          } else {\r\n            this.$message.error(response.data.msg || '获取题目失败');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('获取题目失败:', error);\r\n          this.$message.error('获取题目失败，请重试');\r\n        });\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.problem-set {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n}\r\n\r\nh1 {\r\n  color: #333;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.no-problems {\r\n  text-align: center;\r\n  font-size: 18px;\r\n  color: #999;\r\n  margin-top: 50px;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 20px;\r\n  text-align: center;\r\n}\r\n</style>"],"mappings":";AAiDA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,WAAA;MACAC,QAAA;IACA;EACA;EACAC,QAAA;IACAC,kBAAA;MACA,MAAAC,KAAA,SAAAJ,WAAA,aAAAC,QAAA;MACA,MAAAI,GAAA,QAAAL,WAAA,QAAAC,QAAA;MACA,YAAAF,QAAA,CAAAO,KAAA,CAAAF,KAAA,EAAAC,GAAA;IACA;EACA;EACAE,QAAA;IACA,KAAAC,aAAA;EACA;EACAC,OAAA;IACAC,WAAAC,UAAA;MACA,QAAAA,UAAA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;MACA;IACA;IACAC,YAAAC,EAAA;MACA,KAAAC,OAAA,CAAAC,IAAA,aAAAF,EAAA;IACA;IACAG,oBAAAC,IAAA;MACA,KAAAjB,WAAA,GAAAiB,IAAA;IACA;IACAT,cAAA;MACA,KAAAU,MAAA,CAAAC,GAAA,cACAC,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAvB,IAAA,CAAAwB,IAAA;UACA,KAAAvB,QAAA,GAAAsB,QAAA,CAAAvB,IAAA,CAAAA,IAAA,CAAAyB,GAAA,CAAAC,OAAA;YACAX,EAAA,EAAAW,OAAA,CAAAX,EAAA;YACAY,KAAA,EAAAD,OAAA,CAAAC,KAAA;YACAd,UAAA,EAAAa,OAAA,CAAAb,UAAA;YACAe,WAAA,EAAAF,OAAA,CAAAE,WAAA,CAAAC,KAAA;UACA;QACA;UACA,KAAAC,QAAA,CAAAC,KAAA,CAAAR,QAAA,CAAAvB,IAAA,CAAAgC,GAAA;QACA;MACA,GACAC,KAAA,CAAAF,KAAA;QACAG,OAAA,CAAAH,KAAA,YAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}